// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dsc_etl.dre_fullload_std_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: DRE_FULLLOAD_STD Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class DRE_FULLLOAD_STD implements TalendJob {
	static {System.setProperty("TalendJob.log", "DRE_FULLLOAD_STD.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(DRE_FULLLOAD_STD.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(host_url != null){
				
					this.setProperty("host_url", host_url.toString());
				
			}
			
			if(username != null){
				
					this.setProperty("username", username.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(select_var != null){
				
					this.setProperty("select_var", select_var.toString());
				
			}
			
			if(continueLooping != null){
				
					this.setProperty("continueLooping", continueLooping.toString());
				
			}
			
			if(enddate != null){
				
					this.setProperty("enddate", enddate.toString());
				
			}
			
			if(env != null){
				
					this.setProperty("env", env.toString());
				
			}
			
			if(log_database != null){
				
					this.setProperty("log_database", log_database.toString());
				
			}
			
			if(log_host != null){
				
					this.setProperty("log_host", log_host.toString());
				
			}
			
			if(log_pass != null){
				
					this.setProperty("log_pass", log_pass.toString());
				
			}
			
			if(log_port != null){
				
					this.setProperty("log_port", log_port.toString());
				
			}
			
			if(log_schema != null){
				
					this.setProperty("log_schema", log_schema.toString());
				
			}
			
			if(log_table != null){
				
					this.setProperty("log_table", log_table.toString());
				
			}
			
			if(log_user != null){
				
					this.setProperty("log_user", log_user.toString());
				
			}
			
			if(postgre_database != null){
				
					this.setProperty("postgre_database", postgre_database.toString());
				
			}
			
			if(postgre_host != null){
				
					this.setProperty("postgre_host", postgre_host.toString());
				
			}
			
			if(postgre_password != null){
				
					this.setProperty("postgre_password", postgre_password.toString());
				
			}
			
			if(postgre_port != null){
				
					this.setProperty("postgre_port", postgre_port.toString());
				
			}
			
			if(postgre_schema != null){
				
					this.setProperty("postgre_schema", postgre_schema.toString());
				
			}
			
			if(postgre_username != null){
				
					this.setProperty("postgre_username", postgre_username.toString());
				
			}
			
			if(rptname != null){
				
					this.setProperty("rptname", rptname.toString());
				
			}
			
			if(startdate != null){
				
					this.setProperty("startdate", startdate.toString());
				
			}
			
			if(meta_host != null){
				
					this.setProperty("meta_host", meta_host.toString());
				
			}
			
			if(meta_database != null){
				
					this.setProperty("meta_database", meta_database.toString());
				
			}
			
			if(meta_schemal != null){
				
					this.setProperty("meta_schemal", meta_schemal.toString());
				
			}
			
			if(meta_user != null){
				
					this.setProperty("meta_user", meta_user.toString());
				
			}
			
			if(meta_pass != null){
				
					this.setProperty("meta_pass", meta_pass.toString());
				
			}
			
			if(meta_table != null){
				
					this.setProperty("meta_table", meta_table.toString());
				
			}
			
			if(meta_id != null){
				
					this.setProperty("meta_id", meta_id.toString());
				
			}
			
			if(meta_qryname != null){
				
					this.setProperty("meta_qryname", meta_qryname.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String host_url;
public String getHost_url(){
	return this.host_url;
}
public String username;
public String getUsername(){
	return this.username;
}
public String password;
public String getPassword(){
	return this.password;
}
public String select_var;
public String getSelect_var(){
	return this.select_var;
}
public Boolean continueLooping;
public Boolean getContinueLooping(){
	return this.continueLooping;
}
public String enddate;
public String getEnddate(){
	return this.enddate;
}
public String env;
public String getEnv(){
	return this.env;
}
public String log_database;
public String getLog_database(){
	return this.log_database;
}
public String log_host;
public String getLog_host(){
	return this.log_host;
}
public String log_pass;
public String getLog_pass(){
	return this.log_pass;
}
public String log_port;
public String getLog_port(){
	return this.log_port;
}
public String log_schema;
public String getLog_schema(){
	return this.log_schema;
}
public String log_table;
public String getLog_table(){
	return this.log_table;
}
public String log_user;
public String getLog_user(){
	return this.log_user;
}
public String postgre_database;
public String getPostgre_database(){
	return this.postgre_database;
}
public String postgre_host;
public String getPostgre_host(){
	return this.postgre_host;
}
public String postgre_password;
public String getPostgre_password(){
	return this.postgre_password;
}
public String postgre_port;
public String getPostgre_port(){
	return this.postgre_port;
}
public String postgre_schema;
public String getPostgre_schema(){
	return this.postgre_schema;
}
public String postgre_username;
public String getPostgre_username(){
	return this.postgre_username;
}
public String rptname;
public String getRptname(){
	return this.rptname;
}
public String startdate;
public String getStartdate(){
	return this.startdate;
}
public String meta_host;
public String getMeta_host(){
	return this.meta_host;
}
public String meta_database;
public String getMeta_database(){
	return this.meta_database;
}
public String meta_schemal;
public String getMeta_schemal(){
	return this.meta_schemal;
}
public String meta_user;
public String getMeta_user(){
	return this.meta_user;
}
public String meta_pass;
public String getMeta_pass(){
	return this.meta_pass;
}
public String meta_table;
public String getMeta_table(){
	return this.meta_table;
}
public String meta_id;
public String getMeta_id(){
	return this.meta_id;
}
public String meta_qryname;
public String getMeta_qryname(){
	return this.meta_qryname;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DRE_FULLLOAD_STD";
	private final String projectName = "DSC_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_uGIN4LEYEe-CM4WGyd8dpg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DRE_FULLLOAD_STD.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DRE_FULLLOAD_STD.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tREST_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tREST_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tREST_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tREST_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tREST_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tFixedFlowInput_4Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Body);
            			}
            		
        			sb.append("|");
        		
        				if(ERROR_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ERROR_CODE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tREST_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();





	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowToIterate_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowToIterate_1 = new StringBuilder();
                    log4jParamters_tFlowToIterate_1.append("Parameters:");
                            log4jParamters_tFlowToIterate_1.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_tFlowToIterate_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_1 - "  + (log4jParamters_tFlowToIterate_1) );
                    } 
                } 
            new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();
            }

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tExtractJSONFields_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tExtractJSONFields_1 = new StringBuilder();
                    log4jParamters_tExtractJSONFields_1.append("Parameters:");
                            log4jParamters_tExtractJSONFields_1.append("READ_BY" + " = " + "JSONPATH");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("JSON_PATH_VERSION" + " = " + "2_1_0");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("JSONFIELD" + " = " + "Body");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("JSON_LOOP_QUERY" + " = " + "\"$.token\"");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("MAPPING_4_JSONPATH" + " = " + "[{QUERY="+("\"$\"")+", SCHEMA_COLUMN="+("Body")+"}]");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                            log4jParamters_tExtractJSONFields_1.append("USE_LOOP_AS_ROOT" + " = " + "true");
                        log4jParamters_tExtractJSONFields_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_1 - "  + (log4jParamters_tExtractJSONFields_1) );
                    } 
                } 
            new BytesLimit65535_tExtractJSONFields_1().limitLog4jByte();
            }

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tREST_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_1", false);
		start_Hash.put("tREST_1", System.currentTimeMillis());
		
	
	currentComponent="tREST_1";

	
		int tos_count_tREST_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tREST_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tREST_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tREST_1 = new StringBuilder();
                    log4jParamters_tREST_1.append("Parameters:");
                            log4jParamters_tREST_1.append("URL" + " = " + "context.host_url+\"/apiv2/login\"");
                        log4jParamters_tREST_1.append(" | ");
                            log4jParamters_tREST_1.append("METHOD" + " = " + "POST");
                        log4jParamters_tREST_1.append(" | ");
                            log4jParamters_tREST_1.append("HEADERS" + " = " + "[{VALUE="+("\"application/json\"")+", NAME="+("\"Content-Type\"")+"}]");
                        log4jParamters_tREST_1.append(" | ");
                            log4jParamters_tREST_1.append("BODY" + " = " + "\"{  	\\\"userName\\\": \\\"\"+context.username+\"\\\",  	\\\"password\\\": \\\"\"+context.password+\"\\\"  }\"");
                        log4jParamters_tREST_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tREST_1 - "  + (log4jParamters_tREST_1) );
                    } 
                } 
            new BytesLimit65535_tREST_1().limitLog4jByte();
            }
	

	
	String endpoint_tREST_1 = context.host_url+"/apiv2/login";
	
	String trustStoreFile_tREST_1 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_1 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_1 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_1 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_1 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_1 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_1 = null;
	if(trustStoreFile_tREST_1!=null && trustStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(trustStorePWD_tREST_1!=null)
			password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
		java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore.getInstance(trustStoreType_tREST_1);
		trustStore_tREST_1.load(new java.io.FileInputStream(trustStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_1.init(trustStore_tREST_1);
        tms_tREST_1 = tmf_tREST_1.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_1 = null;
	if(keyStoreFile_tREST_1!=null && keyStoreType_tREST_1!=null){
		char[] password_tREST_1 = null;
		if(keyStorePWD_tREST_1!=null)
			password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
		java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore.getInstance(keyStoreType_tREST_1);
		keyStore_tREST_1.load(new java.io.FileInputStream(keyStoreFile_tREST_1), password_tREST_1);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_1.init(keyStore_tREST_1,password_tREST_1);
        kms_tREST_1 = kmf_tREST_1.getKeyManagers();
	}
	
    ctx_tREST_1.init(kms_tREST_1, tms_tREST_1 , null);
    config_tREST_1.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_1));

	com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client.create(config_tREST_1);
	
	java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();
	
    	headers_tREST_1.put("Content-Type","application/json");
	
	
	Object transfer_encoding_tREST_1 = headers_tREST_1.get("Transfer-Encoding");
	if(transfer_encoding_tREST_1!=null && "chunked".equals(transfer_encoding_tREST_1)) {
		restClient_tREST_1.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_1;
	if(endpoint_tREST_1!=null && !("").equals(endpoint_tREST_1)){
		restResource_tREST_1 = restClient_tREST_1.resource(endpoint_tREST_1);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
	String restResponse_tREST_1 = "";
	try{
		
                if(log.isInfoEnabled())
            log.info("tREST_1 - "  + ("Prepare to send request to rest server.") );
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1.entrySet()) {
			if(builder_tREST_1 == null) {
				builder_tREST_1 = restResource_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			} else {
				builder_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
			}
		}
		
		
			if(builder_tREST_1!=null) {
				restResponse_tREST_1 = builder_tREST_1.post(String.class,"{  	\"userName\": \""+context.username+"\",  	\"password\": \""+context.password+"\"  }");
			} else {
				restResponse_tREST_1 = restResource_tREST_1.post(String.class,"{  	\"userName\": \""+context.username+"\",  	\"password\": \""+context.password+"\"  }");
			}
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
globalMap.put("tREST_1_ERROR_MESSAGE",ue.getMessage());
        errorResponse_tREST_1 = ue.getResponse();
    }
	
                if(log.isInfoEnabled())
            log.info("tREST_1 - "  + ("Has sent request to rest server.") );
	// for output
			
				row1 = new row1Struct();
				if(errorResponse_tREST_1!=null){
					row1.ERROR_CODE = errorResponse_tREST_1.getStatus();
					if(row1.ERROR_CODE!=204){
					    row1.Body = errorResponse_tREST_1.getEntity(String.class);
					}
				}else{
					row1.Body = restResponse_tREST_1;
				}
			

 



/**
 * [tREST_1 begin ] stop
 */
	
	/**
	 * [tREST_1 main ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 


	tos_count_tREST_1++;

/**
 * [tREST_1 main ] stop
 */
	
	/**
	 * [tREST_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

            if(row1.Body!=null){// C_01
                jsonStr_tExtractJSONFields_1 = row1.Body.toString();
   
row2 = null;

	

String loopPath_tExtractJSONFields_1 = "$.token";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
		log.error("tExtractJSONFields_1 - " + ex_tExtractJSONFields_1.getMessage());
		System.err.println(ex_tExtractJSONFields_1.getMessage());
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            row2 = null;
	row2 = new row2Struct();
	nb_line_tExtractJSONFields_1++;
	try {
		jsonPath_tExtractJSONFields_1 = "$";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row2.Body = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row2.Body = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
			log.error("tExtractJSONFields_1 - " + ex_tExtractJSONFields_1.getMessage());
		    System.err.println(ex_tExtractJSONFields_1.getMessage());
		    row2 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
	log.debug("tExtractJSONFields_1 - Extracting the record " + nb_line_tExtractJSONFields_1 + ".");
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("tFlowToIterate_1 - "  + ("Set global var, key=row2.Body, value=")  + (row2.Body)  + (".") );            
            globalMap.put("row2.Body", row2.Body);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_1 - "  + ("Current iteration is: ")  + (counter_tFlowToIterate_1)  + (".") );
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "row2"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */



	
	/**
	 * [tREST_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 process_data_end ] stop
 */
	
	/**
	 * [tREST_1 end ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 
                if(log.isDebugEnabled())
            log.debug("tREST_1 - "  + ("Done.") );

ok_Hash.put("tREST_1", true);
end_Hash.put("tREST_1", System.currentTimeMillis());




/**
 * [tREST_1 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);
	log.debug("tExtractJSONFields_1 - Extracted records count: " + nb_line_tExtractJSONFields_1 + " .");


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_1 - "  + ("Done.") );

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_1 - "  + ("Done.") );

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tREST_4Process(globalMap);



/**
 * [tFlowToIterate_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tREST_1 finally ] start
	 */

	

	
	
	currentComponent="tREST_1";

	

 



/**
 * [tREST_1 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Body);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Body);
            			}
            		
        			sb.append("|");
        		
        				if(ERROR_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ERROR_CODE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tREST_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tREST_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row7Struct row7 = new row7Struct();
row7Struct row9 = row7;






	
	/**
	 * [tFlowToIterate_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowToIterate_3", false);
		start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tFlowToIterate_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowToIterate_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowToIterate_3 = new StringBuilder();
                    log4jParamters_tFlowToIterate_3.append("Parameters:");
                            log4jParamters_tFlowToIterate_3.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_tFlowToIterate_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_3 - "  + (log4jParamters_tFlowToIterate_3) );
                    } 
                } 
            new BytesLimit65535_tFlowToIterate_3().limitLog4jByte();
            }

int nb_line_tFlowToIterate_3 = 0;
int counter_tFlowToIterate_3 = 0;

 



/**
 * [tFlowToIterate_3 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tLogRow_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_4 = new StringBuilder();
                    log4jParamters_tLogRow_4.append("Parameters:");
                            log4jParamters_tLogRow_4.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + (log4jParamters_tLogRow_4) );
                    } 
                } 
            new BytesLimit65535_tLogRow_4().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_3", false);
		start_Hash.put("tExtractJSONFields_3", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tExtractJSONFields_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tExtractJSONFields_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tExtractJSONFields_3 = new StringBuilder();
                    log4jParamters_tExtractJSONFields_3.append("Parameters:");
                            log4jParamters_tExtractJSONFields_3.append("READ_BY" + " = " + "JSONPATH");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                            log4jParamters_tExtractJSONFields_3.append("JSON_PATH_VERSION" + " = " + "2_1_0");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                            log4jParamters_tExtractJSONFields_3.append("JSONFIELD" + " = " + "Body");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                            log4jParamters_tExtractJSONFields_3.append("JSON_LOOP_QUERY" + " = " + "\"$.id\"");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                            log4jParamters_tExtractJSONFields_3.append("MAPPING_4_JSONPATH" + " = " + "[{QUERY="+("\"$\"")+", SCHEMA_COLUMN="+("Body")+"}]");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                            log4jParamters_tExtractJSONFields_3.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                            log4jParamters_tExtractJSONFields_3.append("USE_LOOP_AS_ROOT" + " = " + "true");
                        log4jParamters_tExtractJSONFields_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_3 - "  + (log4jParamters_tExtractJSONFields_3) );
                    } 
                } 
            new BytesLimit65535_tExtractJSONFields_3().limitLog4jByte();
            }

int nb_line_tExtractJSONFields_3 = 0;
String jsonStr_tExtractJSONFields_3 = "";

	

class JsonPathCache_tExtractJSONFields_3 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_3 jsonPathCache_tExtractJSONFields_3 = new JsonPathCache_tExtractJSONFields_3();

 



/**
 * [tExtractJSONFields_3 begin ] stop
 */



	
	/**
	 * [tREST_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_4", false);
		start_Hash.put("tREST_4", System.currentTimeMillis());
		
	
	currentComponent="tREST_4";

	
		int tos_count_tREST_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tREST_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tREST_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tREST_4 = new StringBuilder();
                    log4jParamters_tREST_4.append("Parameters:");
                            log4jParamters_tREST_4.append("URL" + " = " + "context.host_url+\"/api/v3/sql\"");
                        log4jParamters_tREST_4.append(" | ");
                            log4jParamters_tREST_4.append("METHOD" + " = " + "POST");
                        log4jParamters_tREST_4.append(" | ");
                            log4jParamters_tREST_4.append("HEADERS" + " = " + "[{VALUE="+("((String)globalMap.get(\"row2.Body\"))")+", NAME="+("\"Authorization\"")+"}, {VALUE="+("\"application/json\"")+", NAME="+("\"Content-Type\"")+"}]");
                        log4jParamters_tREST_4.append(" | ");
                            log4jParamters_tREST_4.append("BODY" + " = " + "\"{  	\\\"sql\\\": \\\"\"+context.select_var+\"\\\"  }\"");
                        log4jParamters_tREST_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tREST_4 - "  + (log4jParamters_tREST_4) );
                    } 
                } 
            new BytesLimit65535_tREST_4().limitLog4jByte();
            }
	

	
	String endpoint_tREST_4 = context.host_url+"/api/v3/sql";
	
	String trustStoreFile_tREST_4 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_4 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_4 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_4 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_4 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_4 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_4 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	javax.net.ssl.SSLContext ctx_tREST_4 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_4 = null;
	if(trustStoreFile_tREST_4!=null && trustStoreType_tREST_4!=null){
		char[] password_tREST_4 = null;
		if(trustStorePWD_tREST_4!=null)
			password_tREST_4 = trustStorePWD_tREST_4.toCharArray();
		java.security.KeyStore trustStore_tREST_4 = java.security.KeyStore.getInstance(trustStoreType_tREST_4);
		trustStore_tREST_4.load(new java.io.FileInputStream(trustStoreFile_tREST_4), password_tREST_4);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_4 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_4.init(trustStore_tREST_4);
        tms_tREST_4 = tmf_tREST_4.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_4 = null;
	if(keyStoreFile_tREST_4!=null && keyStoreType_tREST_4!=null){
		char[] password_tREST_4 = null;
		if(keyStorePWD_tREST_4!=null)
			password_tREST_4 = keyStorePWD_tREST_4.toCharArray();
		java.security.KeyStore keyStore_tREST_4 = java.security.KeyStore.getInstance(keyStoreType_tREST_4);
		keyStore_tREST_4.load(new java.io.FileInputStream(keyStoreFile_tREST_4), password_tREST_4);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_4 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_4.init(keyStore_tREST_4,password_tREST_4);
        kms_tREST_4 = kmf_tREST_4.getKeyManagers();
	}
	
    ctx_tREST_4.init(kms_tREST_4, tms_tREST_4 , null);
    config_tREST_4.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_4));

	com.sun.jersey.api.client.Client restClient_tREST_4 = com.sun.jersey.api.client.Client.create(config_tREST_4);
	
	java.util.Map<String, Object> headers_tREST_4 = new java.util.HashMap<String, Object>();
	
    	headers_tREST_4.put("Authorization",((String)globalMap.get("row2.Body")));
	
    	headers_tREST_4.put("Content-Type","application/json");
	
	
	Object transfer_encoding_tREST_4 = headers_tREST_4.get("Transfer-Encoding");
	if(transfer_encoding_tREST_4!=null && "chunked".equals(transfer_encoding_tREST_4)) {
		restClient_tREST_4.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_4;
	if(endpoint_tREST_4!=null && !("").equals(endpoint_tREST_4)){
		restResource_tREST_4 = restClient_tREST_4.resource(endpoint_tREST_4);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_4 = null;
	String restResponse_tREST_4 = "";
	try{
		
                if(log.isInfoEnabled())
            log.info("tREST_4 - "  + ("Prepare to send request to rest server.") );
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_4 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_4 : headers_tREST_4.entrySet()) {
			if(builder_tREST_4 == null) {
				builder_tREST_4 = restResource_tREST_4.header(header_tREST_4.getKey(), header_tREST_4.getValue());
			} else {
				builder_tREST_4.header(header_tREST_4.getKey(), header_tREST_4.getValue());
			}
		}
		
		
			if(builder_tREST_4!=null) {
				restResponse_tREST_4 = builder_tREST_4.post(String.class,"{  	\"sql\": \""+context.select_var+"\"  }");
			} else {
				restResponse_tREST_4 = restResource_tREST_4.post(String.class,"{  	\"sql\": \""+context.select_var+"\"  }");
			}
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
globalMap.put("tREST_4_ERROR_MESSAGE",ue.getMessage());
        errorResponse_tREST_4 = ue.getResponse();
    }
	
                if(log.isInfoEnabled())
            log.info("tREST_4 - "  + ("Has sent request to rest server.") );
	// for output
			
				row4 = new row4Struct();
				if(errorResponse_tREST_4!=null){
					row4.ERROR_CODE = errorResponse_tREST_4.getStatus();
					if(row4.ERROR_CODE!=204){
					    row4.Body = errorResponse_tREST_4.getEntity(String.class);
					}
				}else{
					row4.Body = restResponse_tREST_4;
				}
			

 



/**
 * [tREST_4 begin ] stop
 */
	
	/**
	 * [tREST_4 main ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 


	tos_count_tREST_4++;

/**
 * [tREST_4 main ] stop
 */
	
	/**
	 * [tREST_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 



/**
 * [tREST_4 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_3 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

            if(row4.Body!=null){// C_01
                jsonStr_tExtractJSONFields_3 = row4.Body.toString();
   
row7 = null;

	

String loopPath_tExtractJSONFields_3 = "$.id";
java.util.List<Object> resultset_tExtractJSONFields_3 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_3 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_3 = null;
try {
	document_tExtractJSONFields_3 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_3);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(loopPath_tExtractJSONFields_3);
	Object result_tExtractJSONFields_3 = document_tExtractJSONFields_3.read(compiledLoopPath_tExtractJSONFields_3,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_3 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_3 = (net.minidev.json.JSONArray) result_tExtractJSONFields_3;
	} else {
		resultset_tExtractJSONFields_3.add(result_tExtractJSONFields_3);
	}
	
	isStructError_tExtractJSONFields_3 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",ex_tExtractJSONFields_3.getMessage());
		log.error("tExtractJSONFields_3 - " + ex_tExtractJSONFields_3.getMessage());
		System.err.println(ex_tExtractJSONFields_3.getMessage());
}

String jsonPath_tExtractJSONFields_3 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_3 = null;

Object value_tExtractJSONFields_3 = null;

Object root_tExtractJSONFields_3 = null;
for(int i_tExtractJSONFields_3=0; isStructError_tExtractJSONFields_3 || (i_tExtractJSONFields_3 < resultset_tExtractJSONFields_3.size());i_tExtractJSONFields_3++){
	if(!isStructError_tExtractJSONFields_3){
		Object row_tExtractJSONFields_3 = resultset_tExtractJSONFields_3.get(i_tExtractJSONFields_3);
            row7 = null;
	row7 = new row7Struct();
	nb_line_tExtractJSONFields_3++;
	try {
		jsonPath_tExtractJSONFields_3 = "$";
		compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);
		
		try {
		    
		        value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3.read(row_tExtractJSONFields_3);
		    
				row7.Body = value_tExtractJSONFields_3 == null ? 

		null

 : value_tExtractJSONFields_3.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",e_tExtractJSONFields_3.getMessage());
			row7.Body = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_3) {
globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",ex_tExtractJSONFields_3.getMessage());
			log.error("tExtractJSONFields_3 - " + ex_tExtractJSONFields_3.getMessage());
		    System.err.println(ex_tExtractJSONFields_3.getMessage());
		    row7 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_3 = false;
	
	log.debug("tExtractJSONFields_3 - Extracting the record " + nb_line_tExtractJSONFields_3 + ".");
//}


 


	tos_count_tExtractJSONFields_3++;

/**
 * [tExtractJSONFields_3 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	

 



/**
 * [tExtractJSONFields_3 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row7 - " + (row7==null? "": row7.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row7.Body != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row7.Body)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    	log.info("tLogRow_4 - Content of row "+(nb_line_tLogRow_4+1)+": " + strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     row9 = row7;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_3 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row9 - " + (row9==null? "": row9.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("tFlowToIterate_3 - "  + ("Set global var, key=row9.Body, value=")  + (row9.Body)  + (".") );            
            globalMap.put("row9.Body", row9.Body);
    	
 
	   nb_line_tFlowToIterate_3++;  
       counter_tFlowToIterate_3++;
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_3 - "  + ("Current iteration is: ")  + (counter_tFlowToIterate_3)  + (".") );
       globalMap.put("tFlowToIterate_3_CURRENT_ITERATION", counter_tFlowToIterate_3);
 


	tos_count_tFlowToIterate_3++;

/**
 * [tFlowToIterate_3 main ] stop
 */
	
	/**
	 * [tFlowToIterate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

 



/**
 * [tFlowToIterate_3 process_data_begin ] stop
 */
	
	/**
	 * [tFlowToIterate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

 



/**
 * [tFlowToIterate_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row7"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	

 



/**
 * [tExtractJSONFields_3 process_data_end ] stop
 */



	
	/**
	 * [tREST_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 



/**
 * [tREST_4 process_data_end ] stop
 */
	
	/**
	 * [tREST_4 end ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 
                if(log.isDebugEnabled())
            log.debug("tREST_4 - "  + ("Done.") );

ok_Hash.put("tREST_4", true);
end_Hash.put("tREST_4", System.currentTimeMillis());




/**
 * [tREST_4 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_3 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	
   globalMap.put("tExtractJSONFields_3_NB_LINE", nb_line_tExtractJSONFields_3);
	log.debug("tExtractJSONFields_3 - Extracted records count: " + nb_line_tExtractJSONFields_3 + " .");


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_3 - "  + ("Done.") );

ok_Hash.put("tExtractJSONFields_3", true);
end_Hash.put("tExtractJSONFields_3", System.currentTimeMillis());




/**
 * [tExtractJSONFields_3 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);
                if(log.isInfoEnabled())
            log.info("tLogRow_4 - "  + ("Printed row count: ")  + (nb_line_tLogRow_4)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Done.") );

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_3 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

globalMap.put("tFlowToIterate_3_NB_LINE",nb_line_tFlowToIterate_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_3 - "  + ("Done.") );

ok_Hash.put("tFlowToIterate_3", true);
end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tFlowToIterate_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tREST_4 finally ] start
	 */

	

	
	
	currentComponent="tREST_4";

	

 



/**
 * [tREST_4 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_3 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_3";

	

 



/**
 * [tExtractJSONFields_3 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_3 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";

	

 



/**
 * [tFlowToIterate_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tREST_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


// setting loop flag
context.continueLooping = true;
//log.info("Starting job...");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tLoop_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tLoop_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLoop_2 begin ] start
	 */

				
			int NB_ITERATE_tSleep_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_2", false);
		start_Hash.put("tLoop_2", System.currentTimeMillis());
		
	
	currentComponent="tLoop_2";

	
		int tos_count_tLoop_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLoop_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLoop_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLoop_2 = new StringBuilder();
                    log4jParamters_tLoop_2.append("Parameters:");
                            log4jParamters_tLoop_2.append("FORLOOP" + " = " + "false");
                        log4jParamters_tLoop_2.append(" | ");
                            log4jParamters_tLoop_2.append("WHILELOOP" + " = " + "true");
                        log4jParamters_tLoop_2.append(" | ");
                            log4jParamters_tLoop_2.append("DECLARATION" + " = " + "");
                        log4jParamters_tLoop_2.append(" | ");
                            log4jParamters_tLoop_2.append("CONDITION" + " = " + "context.continueLooping");
                        log4jParamters_tLoop_2.append(" | ");
                            log4jParamters_tLoop_2.append("ITERATION" + " = " + "");
                        log4jParamters_tLoop_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLoop_2 - "  + (log4jParamters_tLoop_2) );
                    } 
                } 
            new BytesLimit65535_tLoop_2().limitLog4jByte();
            }

int current_iteration_tLoop_2 = 0;

;
	
		log.info("tLoop_2 - Start to loop using a while loop. Initial declaration: '" + "" + "'. Condition: '" + "context.continueLooping" + "'.");
	
while(context.continueLooping){
	
		log.debug("tLoop_2 - Current iteration value: " + current_iteration_tLoop_2);
	
current_iteration_tLoop_2++;
globalMap.put("tLoop_2_CURRENT_ITERATION",current_iteration_tLoop_2);


 



/**
 * [tLoop_2 begin ] stop
 */
	
	/**
	 * [tLoop_2 main ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 


	tos_count_tLoop_2++;

/**
 * [tLoop_2 main ] stop
 */
	
	/**
	 * [tLoop_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 



/**
 * [tLoop_2 process_data_begin ] stop
 */
	NB_ITERATE_tSleep_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("body", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("jobState", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tSleep_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tSleep_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tSleep_1", false);
		start_Hash.put("tSleep_1", System.currentTimeMillis());
		
	
	currentComponent="tSleep_1";

	
		int tos_count_tSleep_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tSleep_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tSleep_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tSleep_1 = new StringBuilder();
                    log4jParamters_tSleep_1.append("Parameters:");
                            log4jParamters_tSleep_1.append("PAUSE" + " = " + "2");
                        log4jParamters_tSleep_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tSleep_1 - "  + (log4jParamters_tSleep_1) );
                    } 
                } 
            new BytesLimit65535_tSleep_1().limitLog4jByte();
            }

 



/**
 * [tSleep_1 begin ] stop
 */
	
	/**
	 * [tSleep_1 main ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

    Thread.sleep((2)*1000);

 


	tos_count_tSleep_1++;

/**
 * [tSleep_1 main ] stop
 */
	
	/**
	 * [tSleep_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("body", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("jobState", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


 if ("FAILED".equals(globalMap.get("jobState.jobState"))) {
    // Trạng thái FAILED, dừng vòng lặp ngay
    context.continueLooping = false;
    //System.err.println("Job state FAILED, stopping loop...");
} else  if (!"COMPLETED".equals(globalMap.get("jobState.jobState"))) {
    // code cho trạng thái chưa hoàn thành
    context.continueLooping = true; 
    // Tiếp tục lặp    
}  else if (context.continueLooping) {
	 context.continueLooping = false; 
	 // Dừng khi `COMPLETED` và `continueLooping = true`
    // log.info("Job state COMPLETED and looping stopped...");
}  else {
    // Xử lý nếu không thoả mãn điều kiện nào
    context.continueLooping = false; // Đảm bảo dừng
    // log.error("Unexpected state or job already completed...");
}
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tREST_7Process(globalMap);



/**
 * [tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tJava_3);
						}				
					




	
	/**
	 * [tSleep_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_end ] stop
 */
	
	/**
	 * [tSleep_1 end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 
                if(log.isDebugEnabled())
            log.debug("tSleep_1 - "  + ("Done.") );

ok_Hash.put("tSleep_1", true);
end_Hash.put("tSleep_1", System.currentTimeMillis());




/**
 * [tSleep_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tSleep_1);
						}				
					




	
	/**
	 * [tLoop_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 



/**
 * [tLoop_2 process_data_end ] stop
 */
	
	/**
	 * [tLoop_2 end ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	




;


}


 
                if(log.isDebugEnabled())
            log.debug("tLoop_2 - "  + ("Done.") );

ok_Hash.put("tLoop_2", true);
end_Hash.put("tLoop_2", System.currentTimeMillis());




/**
 * [tLoop_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_2 finally ] start
	 */

	

	
	
	currentComponent="tLoop_2";

	

 



/**
 * [tLoop_2 finally ] stop
 */

	
	/**
	 * [tSleep_1 finally ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 finally ] stop
 */

	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_2_SUBPROCESS_STATE", 1);
	}
	


public static class jobStateStruct implements routines.system.IPersistableRow<jobStateStruct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String jobState;

				public String getJobState () {
					return this.jobState;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.jobState = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.jobState = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.jobState,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.jobState,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("jobState="+jobState);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(jobState == null){
        					sb.append("<null>");
        				}else{
            				sb.append(jobState);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(jobStateStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class bodyStruct implements routines.system.IPersistableRow<bodyStruct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_job;

				public String getId_job () {
					return this.id_job;
				}
				
			    public String jobState;

				public String getJobState () {
					return this.jobState;
				}
				
			    public Integer rowCount;

				public Integer getRowCount () {
					return this.rowCount;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				
			    public String startedAt;

				public String getStartedAt () {
					return this.startedAt;
				}
				
			    public String endedAt;

				public String getEndedAt () {
					return this.endedAt;
				}
				
			    public String queryType;

				public String getQueryType () {
					return this.queryType;
				}
				
			    public String queueName;

				public String getQueueName () {
					return this.queueName;
				}
				
			    public String queueId;

				public String getQueueId () {
					return this.queueId;
				}
				
			    public String resourceSchedulingStartedAt;

				public String getResourceSchedulingStartedAt () {
					return this.resourceSchedulingStartedAt;
				}
				
			    public String resourceSchedulingEndedAt;

				public String getResourceSchedulingEndedAt () {
					return this.resourceSchedulingEndedAt;
				}
				
			    public String cancellationReason;

				public String getCancellationReason () {
					return this.cancellationReason;
				}
				
			    public String qry_id;

				public String getQry_id () {
					return this.qry_id;
				}
				
			    public String qry_name;

				public String getQry_name () {
					return this.qry_name;
				}
				
			    public String select_string;

				public String getSelect_string () {
					return this.select_string;
				}
				
			    public java.util.Date datime;

				public java.util.Date getDatime () {
					return this.datime;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_job == null) ? 0 : this.id_job.hashCode());
					
						result = prime * result + ((this.datime == null) ? 0 : this.datime.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final bodyStruct other = (bodyStruct) obj;
		
						if (this.id_job == null) {
							if (other.id_job != null)
								return false;
						
						} else if (!this.id_job.equals(other.id_job))
						
							return false;
					
						if (this.datime == null) {
							if (other.datime != null)
								return false;
						
						} else if (!this.datime.equals(other.datime))
						
							return false;
					

		return true;
    }

	public void copyDataTo(bodyStruct other) {

		other.id_job = this.id_job;
	            other.jobState = this.jobState;
	            other.rowCount = this.rowCount;
	            other.errorMessage = this.errorMessage;
	            other.startedAt = this.startedAt;
	            other.endedAt = this.endedAt;
	            other.queryType = this.queryType;
	            other.queueName = this.queueName;
	            other.queueId = this.queueId;
	            other.resourceSchedulingStartedAt = this.resourceSchedulingStartedAt;
	            other.resourceSchedulingEndedAt = this.resourceSchedulingEndedAt;
	            other.cancellationReason = this.cancellationReason;
	            other.qry_id = this.qry_id;
	            other.qry_name = this.qry_name;
	            other.select_string = this.select_string;
	            other.datime = this.datime;
	            
	}

	public void copyKeysDataTo(bodyStruct other) {

		other.id_job = this.id_job;
	            	other.datime = this.datime;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id_job = readString(dis);
					
					this.jobState = readString(dis);
					
						this.rowCount = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
					this.startedAt = readString(dis);
					
					this.endedAt = readString(dis);
					
					this.queryType = readString(dis);
					
					this.queueName = readString(dis);
					
					this.queueId = readString(dis);
					
					this.resourceSchedulingStartedAt = readString(dis);
					
					this.resourceSchedulingEndedAt = readString(dis);
					
					this.cancellationReason = readString(dis);
					
					this.qry_id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
					this.datime = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id_job = readString(dis);
					
					this.jobState = readString(dis);
					
						this.rowCount = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
					this.startedAt = readString(dis);
					
					this.endedAt = readString(dis);
					
					this.queryType = readString(dis);
					
					this.queueName = readString(dis);
					
					this.queueId = readString(dis);
					
					this.resourceSchedulingStartedAt = readString(dis);
					
					this.resourceSchedulingEndedAt = readString(dis);
					
					this.cancellationReason = readString(dis);
					
					this.qry_id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
					this.datime = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_job,dos);
					
					// String
				
						writeString(this.jobState,dos);
					
					// Integer
				
						writeInteger(this.rowCount,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
					// String
				
						writeString(this.startedAt,dos);
					
					// String
				
						writeString(this.endedAt,dos);
					
					// String
				
						writeString(this.queryType,dos);
					
					// String
				
						writeString(this.queueName,dos);
					
					// String
				
						writeString(this.queueId,dos);
					
					// String
				
						writeString(this.resourceSchedulingStartedAt,dos);
					
					// String
				
						writeString(this.resourceSchedulingEndedAt,dos);
					
					// String
				
						writeString(this.cancellationReason,dos);
					
					// String
				
						writeString(this.qry_id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
					// java.util.Date
				
						writeDate(this.datime,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id_job,dos);
					
					// String
				
						writeString(this.jobState,dos);
					
					// Integer
				
						writeInteger(this.rowCount,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
					// String
				
						writeString(this.startedAt,dos);
					
					// String
				
						writeString(this.endedAt,dos);
					
					// String
				
						writeString(this.queryType,dos);
					
					// String
				
						writeString(this.queueName,dos);
					
					// String
				
						writeString(this.queueId,dos);
					
					// String
				
						writeString(this.resourceSchedulingStartedAt,dos);
					
					// String
				
						writeString(this.resourceSchedulingEndedAt,dos);
					
					// String
				
						writeString(this.cancellationReason,dos);
					
					// String
				
						writeString(this.qry_id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
					// java.util.Date
				
						writeDate(this.datime,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_job="+id_job);
		sb.append(",jobState="+jobState);
		sb.append(",rowCount="+String.valueOf(rowCount));
		sb.append(",errorMessage="+errorMessage);
		sb.append(",startedAt="+startedAt);
		sb.append(",endedAt="+endedAt);
		sb.append(",queryType="+queryType);
		sb.append(",queueName="+queueName);
		sb.append(",queueId="+queueId);
		sb.append(",resourceSchedulingStartedAt="+resourceSchedulingStartedAt);
		sb.append(",resourceSchedulingEndedAt="+resourceSchedulingEndedAt);
		sb.append(",cancellationReason="+cancellationReason);
		sb.append(",qry_id="+qry_id);
		sb.append(",qry_name="+qry_name);
		sb.append(",select_string="+select_string);
		sb.append(",datime="+String.valueOf(datime));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(id_job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(id_job);
            			}
            		
        			sb.append("|");
        		
        				if(jobState == null){
        					sb.append("<null>");
        				}else{
            				sb.append(jobState);
            			}
            		
        			sb.append("|");
        		
        				if(rowCount == null){
        					sb.append("<null>");
        				}else{
            				sb.append(rowCount);
            			}
            		
        			sb.append("|");
        		
        				if(errorMessage == null){
        					sb.append("<null>");
        				}else{
            				sb.append(errorMessage);
            			}
            		
        			sb.append("|");
        		
        				if(startedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(startedAt);
            			}
            		
        			sb.append("|");
        		
        				if(endedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(endedAt);
            			}
            		
        			sb.append("|");
        		
        				if(queryType == null){
        					sb.append("<null>");
        				}else{
            				sb.append(queryType);
            			}
            		
        			sb.append("|");
        		
        				if(queueName == null){
        					sb.append("<null>");
        				}else{
            				sb.append(queueName);
            			}
            		
        			sb.append("|");
        		
        				if(queueId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(queueId);
            			}
            		
        			sb.append("|");
        		
        				if(resourceSchedulingStartedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resourceSchedulingStartedAt);
            			}
            		
        			sb.append("|");
        		
        				if(resourceSchedulingEndedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resourceSchedulingEndedAt);
            			}
            		
        			sb.append("|");
        		
        				if(cancellationReason == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cancellationReason);
            			}
            		
        			sb.append("|");
        		
        				if(qry_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(qry_id);
            			}
            		
        			sb.append("|");
        		
        				if(qry_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(qry_name);
            			}
            		
        			sb.append("|");
        		
        				if(select_string == null){
        					sb.append("<null>");
        				}else{
            				sb.append(select_string);
            			}
            		
        			sb.append("|");
        		
        				if(datime == null){
        					sb.append("<null>");
        				}else{
            				sb.append(datime);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(bodyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_job, other.id_job);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.datime, other.datime);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String jobState;

				public String getJobState () {
					return this.jobState;
				}
				
			    public Integer rowCount;

				public Integer getRowCount () {
					return this.rowCount;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				
			    public String startedAt;

				public String getStartedAt () {
					return this.startedAt;
				}
				
			    public String endedAt;

				public String getEndedAt () {
					return this.endedAt;
				}
				
			    public String queryType;

				public String getQueryType () {
					return this.queryType;
				}
				
			    public String queueName;

				public String getQueueName () {
					return this.queueName;
				}
				
			    public String queueId;

				public String getQueueId () {
					return this.queueId;
				}
				
			    public String resourceSchedulingStartedAt;

				public String getResourceSchedulingStartedAt () {
					return this.resourceSchedulingStartedAt;
				}
				
			    public String resourceSchedulingEndedAt;

				public String getResourceSchedulingEndedAt () {
					return this.resourceSchedulingEndedAt;
				}
				
			    public String cancellationReason;

				public String getCancellationReason () {
					return this.cancellationReason;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.jobState = readString(dis);
					
						this.rowCount = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
					this.startedAt = readString(dis);
					
					this.endedAt = readString(dis);
					
					this.queryType = readString(dis);
					
					this.queueName = readString(dis);
					
					this.queueId = readString(dis);
					
					this.resourceSchedulingStartedAt = readString(dis);
					
					this.resourceSchedulingEndedAt = readString(dis);
					
					this.cancellationReason = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.jobState = readString(dis);
					
						this.rowCount = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
					this.startedAt = readString(dis);
					
					this.endedAt = readString(dis);
					
					this.queryType = readString(dis);
					
					this.queueName = readString(dis);
					
					this.queueId = readString(dis);
					
					this.resourceSchedulingStartedAt = readString(dis);
					
					this.resourceSchedulingEndedAt = readString(dis);
					
					this.cancellationReason = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.jobState,dos);
					
					// Integer
				
						writeInteger(this.rowCount,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
					// String
				
						writeString(this.startedAt,dos);
					
					// String
				
						writeString(this.endedAt,dos);
					
					// String
				
						writeString(this.queryType,dos);
					
					// String
				
						writeString(this.queueName,dos);
					
					// String
				
						writeString(this.queueId,dos);
					
					// String
				
						writeString(this.resourceSchedulingStartedAt,dos);
					
					// String
				
						writeString(this.resourceSchedulingEndedAt,dos);
					
					// String
				
						writeString(this.cancellationReason,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.jobState,dos);
					
					// Integer
				
						writeInteger(this.rowCount,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
					// String
				
						writeString(this.startedAt,dos);
					
					// String
				
						writeString(this.endedAt,dos);
					
					// String
				
						writeString(this.queryType,dos);
					
					// String
				
						writeString(this.queueName,dos);
					
					// String
				
						writeString(this.queueId,dos);
					
					// String
				
						writeString(this.resourceSchedulingStartedAt,dos);
					
					// String
				
						writeString(this.resourceSchedulingEndedAt,dos);
					
					// String
				
						writeString(this.cancellationReason,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("jobState="+jobState);
		sb.append(",rowCount="+String.valueOf(rowCount));
		sb.append(",errorMessage="+errorMessage);
		sb.append(",startedAt="+startedAt);
		sb.append(",endedAt="+endedAt);
		sb.append(",queryType="+queryType);
		sb.append(",queueName="+queueName);
		sb.append(",queueId="+queueId);
		sb.append(",resourceSchedulingStartedAt="+resourceSchedulingStartedAt);
		sb.append(",resourceSchedulingEndedAt="+resourceSchedulingEndedAt);
		sb.append(",cancellationReason="+cancellationReason);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(jobState == null){
        					sb.append("<null>");
        				}else{
            				sb.append(jobState);
            			}
            		
        			sb.append("|");
        		
        				if(rowCount == null){
        					sb.append("<null>");
        				}else{
            				sb.append(rowCount);
            			}
            		
        			sb.append("|");
        		
        				if(errorMessage == null){
        					sb.append("<null>");
        				}else{
            				sb.append(errorMessage);
            			}
            		
        			sb.append("|");
        		
        				if(startedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(startedAt);
            			}
            		
        			sb.append("|");
        		
        				if(endedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(endedAt);
            			}
            		
        			sb.append("|");
        		
        				if(queryType == null){
        					sb.append("<null>");
        				}else{
            				sb.append(queryType);
            			}
            		
        			sb.append("|");
        		
        				if(queueName == null){
        					sb.append("<null>");
        				}else{
            				sb.append(queueName);
            			}
            		
        			sb.append("|");
        		
        				if(queueId == null){
        					sb.append("<null>");
        				}else{
            				sb.append(queueId);
            			}
            		
        			sb.append("|");
        		
        				if(resourceSchedulingStartedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resourceSchedulingStartedAt);
            			}
            		
        			sb.append("|");
        		
        				if(resourceSchedulingEndedAt == null){
        					sb.append("<null>");
        				}else{
            				sb.append(resourceSchedulingEndedAt);
            			}
            		
        			sb.append("|");
        		
        				if(cancellationReason == null){
        					sb.append("<null>");
        				}else{
            				sb.append(cancellationReason);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public Integer ERROR_CODE;

				public Integer getERROR_CODE () {
					return this.ERROR_CODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
						this.ERROR_CODE = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
					// Integer
				
						writeInteger(this.ERROR_CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
		sb.append(",ERROR_CODE="+String.valueOf(ERROR_CODE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(Body == null){
        					sb.append("<null>");
        				}else{
            				sb.append(Body);
            			}
            		
        			sb.append("|");
        		
        				if(ERROR_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ERROR_CODE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tREST_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tREST_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row10Struct row10 = new row10Struct();
jobStateStruct jobState = new jobStateStruct();
bodyStruct body = new bodyStruct();






	
	/**
	 * [tFlowToIterate_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowToIterate_4", false);
		start_Hash.put("tFlowToIterate_4", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"jobState");
					}
				
		int tos_count_tFlowToIterate_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowToIterate_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowToIterate_4 = new StringBuilder();
                    log4jParamters_tFlowToIterate_4.append("Parameters:");
                            log4jParamters_tFlowToIterate_4.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_tFlowToIterate_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_4 - "  + (log4jParamters_tFlowToIterate_4) );
                    } 
                } 
            new BytesLimit65535_tFlowToIterate_4().limitLog4jByte();
            }

int nb_line_tFlowToIterate_4 = 0;
int counter_tFlowToIterate_4 = 0;

 



/**
 * [tFlowToIterate_4 begin ] stop
 */




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"body");
					}
				
		int tos_count_tDBOutput_6 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_6{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_6 = new StringBuilder();
                    log4jParamters_tDBOutput_6.append("Parameters:");
                            log4jParamters_tDBOutput_6.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("HOST" + " = " + "context.log_host");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("PORT" + " = " + "\"5432\"");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DBNAME" + " = " + "context.log_database");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("SCHEMA_DB" + " = " + "context.log_schema");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("USER" + " = " + "context.log_user");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.log_pass)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("TABLE" + " = " + "\"dremio_run_logs\"");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DATA_ACTION" + " = " + "UPDATE_OR_INSERT");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("COMMIT_EVERY" + " = " + "10000");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_6.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + (log4jParamters_tDBOutput_6) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_6().limitLog4jByte();
            }





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.log_schema;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("dremio_run_logs");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("dremio_run_logs");
}

        int updateKeyCount_tDBOutput_6 = 2;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_6 == 16 && true) {
                    log.warn("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.log_host+":"+"5432"+"/"+context.log_database + "?" + "noDatetimeStringSync=true";
    dbUser_tDBOutput_6 = context.log_user;

	final String decryptedPassword_tDBOutput_6 = context.log_pass; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection attempts to '")  + (url_tDBOutput_6)  + ("' with the username '")  + (dbUser_tDBOutput_6)  + ("'.") );
    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection to '")  + (url_tDBOutput_6)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 10000;
        int commitCounter_tDBOutput_6 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_6.getAutoCommit())  + ("'.") );



int count_tDBOutput_6=0;
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"jobState\" = ?,\"rowCount\" = ?,\"errorMessage\" = ?,\"startedAt\" = ?,\"endedAt\" = ?,\"queryType\" = ?,\"queueName\" = ?,\"queueId\" = ?,\"resourceSchedulingStartedAt\" = ?,\"resourceSchedulingEndedAt\" = ?,\"cancellationReason\" = ?,\"qry_id\" = ?,\"qry_name\" = ?,\"select_string\" = ? WHERE \"id_job\" = ? AND \"datime\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmtUpdate_tDBOutput_6", pstmtUpdate_tDBOutput_6);
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"id_job\",\"jobState\",\"rowCount\",\"errorMessage\",\"startedAt\",\"endedAt\",\"queryType\",\"queueName\",\"queueId\",\"resourceSchedulingStartedAt\",\"resourceSchedulingEndedAt\",\"cancellationReason\",\"qry_id\",\"qry_name\",\"select_string\",\"datime\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row10_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_jobState_tMap_1 = 0;
				
jobStateStruct jobState_tmp = new jobStateStruct();
				int count_body_tMap_1 = 0;
				
bodyStruct body_tmp = new bodyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_4", false);
		start_Hash.put("tExtractJSONFields_4", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tExtractJSONFields_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tExtractJSONFields_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tExtractJSONFields_4 = new StringBuilder();
                    log4jParamters_tExtractJSONFields_4.append("Parameters:");
                            log4jParamters_tExtractJSONFields_4.append("READ_BY" + " = " + "JSONPATH");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                            log4jParamters_tExtractJSONFields_4.append("JSON_PATH_VERSION" + " = " + "2_1_0");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                            log4jParamters_tExtractJSONFields_4.append("JSONFIELD" + " = " + "Body");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                            log4jParamters_tExtractJSONFields_4.append("JSON_LOOP_QUERY" + " = " + "\"$\"");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                            log4jParamters_tExtractJSONFields_4.append("MAPPING_4_JSONPATH" + " = " + "[{QUERY="+("\"jobState\"")+", SCHEMA_COLUMN="+("jobState")+"}, {QUERY="+("\"rowCount\"")+", SCHEMA_COLUMN="+("rowCount")+"}, {QUERY="+("\"errorMessage\"")+", SCHEMA_COLUMN="+("errorMessage")+"}, {QUERY="+("\"startedAt\"")+", SCHEMA_COLUMN="+("startedAt")+"}, {QUERY="+("\"endedAt\"")+", SCHEMA_COLUMN="+("endedAt")+"}, {QUERY="+("\"queryType\"")+", SCHEMA_COLUMN="+("queryType")+"}, {QUERY="+("\"queueName\"")+", SCHEMA_COLUMN="+("queueName")+"}, {QUERY="+("\"queueId\"")+", SCHEMA_COLUMN="+("queueId")+"}, {QUERY="+("\"resourceSchedulingStartedAt\"")+", SCHEMA_COLUMN="+("resourceSchedulingStartedAt")+"}, {QUERY="+("\"resourceSchedulingEndedAt\"")+", SCHEMA_COLUMN="+("resourceSchedulingEndedAt")+"}, {QUERY="+("\"cancellationReason\"")+", SCHEMA_COLUMN="+("cancellationReason")+"}]");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                            log4jParamters_tExtractJSONFields_4.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                            log4jParamters_tExtractJSONFields_4.append("USE_LOOP_AS_ROOT" + " = " + "true");
                        log4jParamters_tExtractJSONFields_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_4 - "  + (log4jParamters_tExtractJSONFields_4) );
                    } 
                } 
            new BytesLimit65535_tExtractJSONFields_4().limitLog4jByte();
            }

int nb_line_tExtractJSONFields_4 = 0;
String jsonStr_tExtractJSONFields_4 = "";

	

class JsonPathCache_tExtractJSONFields_4 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_4 jsonPathCache_tExtractJSONFields_4 = new JsonPathCache_tExtractJSONFields_4();

 



/**
 * [tExtractJSONFields_4 begin ] stop
 */



	
	/**
	 * [tREST_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tREST_7", false);
		start_Hash.put("tREST_7", System.currentTimeMillis());
		
	
	currentComponent="tREST_7";

	
		int tos_count_tREST_7 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tREST_7 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tREST_7{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tREST_7 = new StringBuilder();
                    log4jParamters_tREST_7.append("Parameters:");
                            log4jParamters_tREST_7.append("URL" + " = " + "context.host_url+\"/api/v3/job/\"+((String)globalMap.get(\"row9.Body\"))");
                        log4jParamters_tREST_7.append(" | ");
                            log4jParamters_tREST_7.append("METHOD" + " = " + "GET");
                        log4jParamters_tREST_7.append(" | ");
                            log4jParamters_tREST_7.append("HEADERS" + " = " + "[{VALUE="+("((String)globalMap.get(\"row2.Body\"))")+", NAME="+("\"Authorization\"")+"}, {VALUE="+("\"application/json\"")+", NAME="+("\"Content-Type\"")+"}]");
                        log4jParamters_tREST_7.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tREST_7 - "  + (log4jParamters_tREST_7) );
                    } 
                } 
            new BytesLimit65535_tREST_7().limitLog4jByte();
            }
	

	
	String endpoint_tREST_7 = context.host_url+"/api/v3/job/"+((String)globalMap.get("row9.Body"));
	
	String trustStoreFile_tREST_7 = System.getProperty("javax.net.ssl.trustStore");
	String trustStoreType_tREST_7 = System.getProperty("javax.net.ssl.trustStoreType");
	String trustStorePWD_tREST_7 = System.getProperty("javax.net.ssl.trustStorePassword");
	
	String keyStoreFile_tREST_7 = System.getProperty("javax.net.ssl.keyStore");
	String keyStoreType_tREST_7 = System.getProperty("javax.net.ssl.keyStoreType");
	String keyStorePWD_tREST_7 = System.getProperty("javax.net.ssl.keyStorePassword");
	
	com.sun.jersey.api.client.config.ClientConfig config_tREST_7 = new com.sun.jersey.api.client.config.DefaultClientConfig();
	javax.net.ssl.SSLContext ctx_tREST_7 = javax.net.ssl.SSLContext.getInstance("SSL");
	
	javax.net.ssl.TrustManager[] tms_tREST_7 = null;
	if(trustStoreFile_tREST_7!=null && trustStoreType_tREST_7!=null){
		char[] password_tREST_7 = null;
		if(trustStorePWD_tREST_7!=null)
			password_tREST_7 = trustStorePWD_tREST_7.toCharArray();
		java.security.KeyStore trustStore_tREST_7 = java.security.KeyStore.getInstance(trustStoreType_tREST_7);
		trustStore_tREST_7.load(new java.io.FileInputStream(trustStoreFile_tREST_7), password_tREST_7);
		
		javax.net.ssl.TrustManagerFactory tmf_tREST_7 = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        tmf_tREST_7.init(trustStore_tREST_7);
        tms_tREST_7 = tmf_tREST_7.getTrustManagers();
	}
	
	javax.net.ssl.KeyManager[] kms_tREST_7 = null;
	if(keyStoreFile_tREST_7!=null && keyStoreType_tREST_7!=null){
		char[] password_tREST_7 = null;
		if(keyStorePWD_tREST_7!=null)
			password_tREST_7 = keyStorePWD_tREST_7.toCharArray();
		java.security.KeyStore keyStore_tREST_7 = java.security.KeyStore.getInstance(keyStoreType_tREST_7);
		keyStore_tREST_7.load(new java.io.FileInputStream(keyStoreFile_tREST_7), password_tREST_7);
		
		javax.net.ssl.KeyManagerFactory kmf_tREST_7 = javax.net.ssl.KeyManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
        kmf_tREST_7.init(keyStore_tREST_7,password_tREST_7);
        kms_tREST_7 = kmf_tREST_7.getKeyManagers();
	}
	
    ctx_tREST_7.init(kms_tREST_7, tms_tREST_7 , null);
    config_tREST_7.getProperties().put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
                new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

                    public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
                        return true;
                    }
                }, ctx_tREST_7));

	com.sun.jersey.api.client.Client restClient_tREST_7 = com.sun.jersey.api.client.Client.create(config_tREST_7);
	
	java.util.Map<String, Object> headers_tREST_7 = new java.util.HashMap<String, Object>();
	
    	headers_tREST_7.put("Authorization",((String)globalMap.get("row2.Body")));
	
    	headers_tREST_7.put("Content-Type","application/json");
	
	
	Object transfer_encoding_tREST_7 = headers_tREST_7.get("Transfer-Encoding");
	if(transfer_encoding_tREST_7!=null && "chunked".equals(transfer_encoding_tREST_7)) {
		restClient_tREST_7.setChunkedEncodingSize(4096);
	}
	
	com.sun.jersey.api.client.WebResource restResource_tREST_7;
	if(endpoint_tREST_7!=null && !("").equals(endpoint_tREST_7)){
		restResource_tREST_7 = restClient_tREST_7.resource(endpoint_tREST_7);
	}else{
		throw new IllegalArgumentException("url can't be empty!");
	}
	
	com.sun.jersey.api.client.ClientResponse errorResponse_tREST_7 = null;
	String restResponse_tREST_7 = "";
	try{
		
                if(log.isInfoEnabled())
            log.info("tREST_7 - "  + ("Prepare to send request to rest server.") );
		com.sun.jersey.api.client.WebResource.Builder builder_tREST_7 = null;
		for(java.util.Map.Entry<String, Object> header_tREST_7 : headers_tREST_7.entrySet()) {
			if(builder_tREST_7 == null) {
				builder_tREST_7 = restResource_tREST_7.header(header_tREST_7.getKey(), header_tREST_7.getValue());
			} else {
				builder_tREST_7.header(header_tREST_7.getKey(), header_tREST_7.getValue());
			}
		}
		
		
			if(builder_tREST_7!=null) {
				restResponse_tREST_7 = builder_tREST_7.get(String.class);
			} else {
				restResponse_tREST_7 = restResource_tREST_7.get(String.class);
			} 
			
		
	}catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
globalMap.put("tREST_7_ERROR_MESSAGE",ue.getMessage());
        errorResponse_tREST_7 = ue.getResponse();
    }
	
                if(log.isInfoEnabled())
            log.info("tREST_7 - "  + ("Has sent request to rest server.") );
	// for output
			
				row8 = new row8Struct();
				if(errorResponse_tREST_7!=null){
					row8.ERROR_CODE = errorResponse_tREST_7.getStatus();
					if(row8.ERROR_CODE!=204){
					    row8.Body = errorResponse_tREST_7.getEntity(String.class);
					}
				}else{
					row8.Body = restResponse_tREST_7;
				}
			

 



/**
 * [tREST_7 begin ] stop
 */
	
	/**
	 * [tREST_7 main ] start
	 */

	

	
	
	currentComponent="tREST_7";

	

 


	tos_count_tREST_7++;

/**
 * [tREST_7 main ] stop
 */
	
	/**
	 * [tREST_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tREST_7";

	

 



/**
 * [tREST_7 process_data_begin ] stop
 */

	
	/**
	 * [tExtractJSONFields_4 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row8 - " + (row8==null? "": row8.toLogString()));
    			}
    		

            if(row8.Body!=null){// C_01
                jsonStr_tExtractJSONFields_4 = row8.Body.toString();
   
row10 = null;

	

String loopPath_tExtractJSONFields_4 = "$";
java.util.List<Object> resultset_tExtractJSONFields_4 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_4 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_4 = null;
try {
	document_tExtractJSONFields_4 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_4);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(loopPath_tExtractJSONFields_4);
	Object result_tExtractJSONFields_4 = document_tExtractJSONFields_4.read(compiledLoopPath_tExtractJSONFields_4,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_4 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_4 = (net.minidev.json.JSONArray) result_tExtractJSONFields_4;
	} else {
		resultset_tExtractJSONFields_4.add(result_tExtractJSONFields_4);
	}
	
	isStructError_tExtractJSONFields_4 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",ex_tExtractJSONFields_4.getMessage());
		log.error("tExtractJSONFields_4 - " + ex_tExtractJSONFields_4.getMessage());
		System.err.println(ex_tExtractJSONFields_4.getMessage());
}

String jsonPath_tExtractJSONFields_4 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_4 = null;

Object value_tExtractJSONFields_4 = null;

Object root_tExtractJSONFields_4 = null;
for(int i_tExtractJSONFields_4=0; isStructError_tExtractJSONFields_4 || (i_tExtractJSONFields_4 < resultset_tExtractJSONFields_4.size());i_tExtractJSONFields_4++){
	if(!isStructError_tExtractJSONFields_4){
		Object row_tExtractJSONFields_4 = resultset_tExtractJSONFields_4.get(i_tExtractJSONFields_4);
            row10 = null;
	row10 = new row10Struct();
	nb_line_tExtractJSONFields_4++;
	try {
		jsonPath_tExtractJSONFields_4 = "jobState";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.jobState = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.jobState = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "rowCount";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				if(value_tExtractJSONFields_4 != null && !value_tExtractJSONFields_4.toString().isEmpty()) {
					row10.rowCount = ParserUtils.parseTo_Integer(value_tExtractJSONFields_4.toString());
				} else {
					row10.rowCount = 

		null

;
				}
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.rowCount = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "errorMessage";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.errorMessage = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.errorMessage = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "startedAt";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.startedAt = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.startedAt = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "endedAt";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.endedAt = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.endedAt = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "queryType";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.queryType = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.queryType = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "queueName";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.queueName = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.queueName = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "queueId";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.queueId = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.queueId = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "resourceSchedulingStartedAt";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.resourceSchedulingStartedAt = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.resourceSchedulingStartedAt = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "resourceSchedulingEndedAt";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.resourceSchedulingEndedAt = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.resourceSchedulingEndedAt = 

		null

;
		}
		jsonPath_tExtractJSONFields_4 = "cancellationReason";
		compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);
		
		try {
		    
		        value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4.read(row_tExtractJSONFields_4);
		    
				row10.cancellationReason = value_tExtractJSONFields_4 == null ? 

		null

 : value_tExtractJSONFields_4.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",e_tExtractJSONFields_4.getMessage());
			row10.cancellationReason = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_4) {
globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",ex_tExtractJSONFields_4.getMessage());
			log.error("tExtractJSONFields_4 - " + ex_tExtractJSONFields_4.getMessage());
		    System.err.println(ex_tExtractJSONFields_4.getMessage());
		    row10 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_4 = false;
	
	log.debug("tExtractJSONFields_4 - Extracting the record " + nb_line_tExtractJSONFields_4 + ".");
//}


 


	tos_count_tExtractJSONFields_4++;

/**
 * [tExtractJSONFields_4 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	

 



/**
 * [tExtractJSONFields_4 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row10 - " + (row10==null? "": row10.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

jobState = null;
body = null;


// # Output table : 'jobState'
count_jobState_tMap_1++;

jobState_tmp.jobState = row10.jobState ;
jobState = jobState_tmp;
log.debug("tMap_1 - Outputting the record " + count_jobState_tMap_1 + " of the output table 'jobState'.");


// # Output table : 'body'
count_body_tMap_1++;

body_tmp.id_job = ((String)globalMap.get("row9.Body"));
body_tmp.jobState = row10.jobState ;
body_tmp.rowCount = row10.rowCount ;
body_tmp.errorMessage = row10.errorMessage ;
body_tmp.startedAt = row10.startedAt ;
body_tmp.endedAt = row10.endedAt ;
body_tmp.queryType = row10.queryType ;
body_tmp.queueName = row10.queueName ;
body_tmp.queueId = row10.queueId ;
body_tmp.resourceSchedulingStartedAt = row10.resourceSchedulingStartedAt ;
body_tmp.resourceSchedulingEndedAt = row10.resourceSchedulingEndedAt ;
body_tmp.cancellationReason = row10.cancellationReason ;
body_tmp.qry_id = ((String)globalMap.get("select_str.id"));
body_tmp.qry_name = ((String)globalMap.get("select_str.qry_name"));
body_tmp.select_string = ((String)globalMap.get("select_str.select_string"));
body_tmp.datime = TalendDate.getCurrentDate();
body = body_tmp;
log.debug("tMap_1 - Outputting the record " + count_body_tMap_1 + " of the output table 'body'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "jobState"
if(jobState != null) { 



	
	/**
	 * [tFlowToIterate_4 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"jobState"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("jobState - " + (jobState==null? "": jobState.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("tFlowToIterate_4 - "  + ("Set global var, key=jobState.jobState, value=")  + (jobState.jobState)  + (".") );            
            globalMap.put("jobState.jobState", jobState.jobState);
    	
 
	   nb_line_tFlowToIterate_4++;  
       counter_tFlowToIterate_4++;
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_4 - "  + ("Current iteration is: ")  + (counter_tFlowToIterate_4)  + (".") );
       globalMap.put("tFlowToIterate_4_CURRENT_ITERATION", counter_tFlowToIterate_4);
 


	tos_count_tFlowToIterate_4++;

/**
 * [tFlowToIterate_4 main ] stop
 */
	
	/**
	 * [tFlowToIterate_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_4";

	

 



/**
 * [tFlowToIterate_4 process_data_begin ] stop
 */
	
	/**
	 * [tFlowToIterate_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_4";

	

 



/**
 * [tFlowToIterate_4 process_data_end ] stop
 */

} // End of branch "jobState"




// Start of branch "body"
if(body != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"body"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("body - " + (body==null? "": body.toLogString()));
    			}
    		



        whetherReject_tDBOutput_6 = false;
            int updateFlag_tDBOutput_6=0;
                    if(body.jobState == null) {
pstmtUpdate_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(1, body.jobState);
}

                    if(body.rowCount == null) {
pstmtUpdate_tDBOutput_6.setNull(2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_6.setInt(2, body.rowCount);
}

                    if(body.errorMessage == null) {
pstmtUpdate_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(3, body.errorMessage);
}

                    if(body.startedAt == null) {
pstmtUpdate_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(4, body.startedAt);
}

                    if(body.endedAt == null) {
pstmtUpdate_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(5, body.endedAt);
}

                    if(body.queryType == null) {
pstmtUpdate_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(6, body.queryType);
}

                    if(body.queueName == null) {
pstmtUpdate_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(7, body.queueName);
}

                    if(body.queueId == null) {
pstmtUpdate_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(8, body.queueId);
}

                    if(body.resourceSchedulingStartedAt == null) {
pstmtUpdate_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(9, body.resourceSchedulingStartedAt);
}

                    if(body.resourceSchedulingEndedAt == null) {
pstmtUpdate_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(10, body.resourceSchedulingEndedAt);
}

                    if(body.cancellationReason == null) {
pstmtUpdate_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(11, body.cancellationReason);
}

                    if(body.qry_id == null) {
pstmtUpdate_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(12, body.qry_id);
}

                    if(body.qry_name == null) {
pstmtUpdate_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(13, body.qry_name);
}

                    if(body.select_string == null) {
pstmtUpdate_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(14, body.select_string);
}


                    if(body.id_job == null) {
pstmtUpdate_tDBOutput_6.setNull(15 + count_tDBOutput_6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_6.setString(15 + count_tDBOutput_6, body.id_job);
}


                    if(body.datime != null) {
pstmtUpdate_tDBOutput_6.setTimestamp(16 + count_tDBOutput_6, new java.sql.Timestamp(body.datime.getTime()));
} else {
pstmtUpdate_tDBOutput_6.setNull(16 + count_tDBOutput_6, java.sql.Types.TIMESTAMP);
}


            try {
				
                updateFlag_tDBOutput_6=pstmtUpdate_tDBOutput_6.executeUpdate();
                updatedCount_tDBOutput_6 = updatedCount_tDBOutput_6+updateFlag_tDBOutput_6;
                rowsToCommitCount_tDBOutput_6 += updateFlag_tDBOutput_6;
				
            if(updateFlag_tDBOutput_6 == 0) {
            	
                        if(body.id_job == null) {
pstmtInsert_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(1, body.id_job);
}

                        if(body.jobState == null) {
pstmtInsert_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(2, body.jobState);
}

                        if(body.rowCount == null) {
pstmtInsert_tDBOutput_6.setNull(3, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_6.setInt(3, body.rowCount);
}

                        if(body.errorMessage == null) {
pstmtInsert_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(4, body.errorMessage);
}

                        if(body.startedAt == null) {
pstmtInsert_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(5, body.startedAt);
}

                        if(body.endedAt == null) {
pstmtInsert_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(6, body.endedAt);
}

                        if(body.queryType == null) {
pstmtInsert_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(7, body.queryType);
}

                        if(body.queueName == null) {
pstmtInsert_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(8, body.queueName);
}

                        if(body.queueId == null) {
pstmtInsert_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(9, body.queueId);
}

                        if(body.resourceSchedulingStartedAt == null) {
pstmtInsert_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(10, body.resourceSchedulingStartedAt);
}

                        if(body.resourceSchedulingEndedAt == null) {
pstmtInsert_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(11, body.resourceSchedulingEndedAt);
}

                        if(body.cancellationReason == null) {
pstmtInsert_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(12, body.cancellationReason);
}

                        if(body.qry_id == null) {
pstmtInsert_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(13, body.qry_id);
}

                        if(body.qry_name == null) {
pstmtInsert_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(14, body.qry_name);
}

                        if(body.select_string == null) {
pstmtInsert_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_6.setString(15, body.select_string);
}

                        if(body.datime != null) {
pstmtInsert_tDBOutput_6.setTimestamp(16, new java.sql.Timestamp(body.datime.getTime()));
} else {
pstmtInsert_tDBOutput_6.setNull(16, java.sql.Types.TIMESTAMP);
}

					
                    int processedCount_tDBOutput_6 = pstmtInsert_tDBOutput_6.executeUpdate();
                    insertedCount_tDBOutput_6 += processedCount_tDBOutput_6;
                    rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
                    nb_line_tDBOutput_6++;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Inserting")  + (" the record ")  + (nb_line_tDBOutput_6)  + (".") );
					
    	            }else{
    					nb_line_tDBOutput_6++;
    					
     					
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Updating")  + (" the record ")  + (nb_line_tDBOutput_6)  + (".") );
    				}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_6 = true;
                        nb_line_tDBOutput_6++;
            log.error("tDBOutput_6 - "  + (e.getMessage()) );
                            System.err.print(e.getMessage());
                }
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                    if(rowsToCommitCount_tDBOutput_6 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_6)  + (" record(s).") );
                    }
                    conn_tDBOutput_6.commit();
                    if(rowsToCommitCount_tDBOutput_6 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_6 = 0;
                    }
                    commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "body"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row10"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	

 



/**
 * [tExtractJSONFields_4 process_data_end ] stop
 */



	
	/**
	 * [tREST_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tREST_7";

	

 



/**
 * [tREST_7 process_data_end ] stop
 */
	
	/**
	 * [tREST_7 end ] start
	 */

	

	
	
	currentComponent="tREST_7";

	

 
                if(log.isDebugEnabled())
            log.debug("tREST_7 - "  + ("Done.") );

ok_Hash.put("tREST_7", true);
end_Hash.put("tREST_7", System.currentTimeMillis());




/**
 * [tREST_7 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_4 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_4);
	log.debug("tExtractJSONFields_4 - Extracted records count: " + nb_line_tExtractJSONFields_4 + " .");


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tExtractJSONFields_4 - "  + ("Done.") );

ok_Hash.put("tExtractJSONFields_4", true);
end_Hash.put("tExtractJSONFields_4", System.currentTimeMillis());




/**
 * [tExtractJSONFields_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'jobState': " + count_jobState_tMap_1 + ".");
				log.debug("tMap_1 - Written records count in the table 'body': " + count_body_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_4 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_4";

	

globalMap.put("tFlowToIterate_4_NB_LINE",nb_line_tFlowToIterate_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"jobState");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_4 - "  + ("Done.") );

ok_Hash.put("tFlowToIterate_4", true);
end_Hash.put("tFlowToIterate_4", System.currentTimeMillis());




/**
 * [tFlowToIterate_4 end ] stop
 */




	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



        if(pstmtUpdate_tDBOutput_6 != null){
            pstmtUpdate_tDBOutput_6.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_6");
        }
        if(pstmtInsert_tDBOutput_6 != null){
            pstmtInsert_tDBOutput_6.close();
            resourceMap.remove("pstmtInsert_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			if(rowsToCommitCount_tDBOutput_6 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_6)  + (" record(s).") );
			}
			conn_tDBOutput_6.commit();
			if(rowsToCommitCount_tDBOutput_6 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_6 = 0;
			}
			commitCounter_tDBOutput_6 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_6 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_6)  + (" record(s).") );
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_6)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"body");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Done.") );

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tREST_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFixedFlowInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tREST_7 finally ] start
	 */

	

	
	
	currentComponent="tREST_7";

	

 



/**
 * [tREST_7 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_4 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_4";

	

 



/**
 * [tExtractJSONFields_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_4 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_4";

	

 



/**
 * [tFlowToIterate_4 finally ] stop
 */




	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
                if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_6")) != null) {
                    pstmtUpdateToClose_tDBOutput_6.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
                if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_6")) != null) {
                    pstmtInsertToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_6.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
            log.error("tDBOutput_6 - "  + (errorMessage_tDBOutput_6) );
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tREST_7_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String p_name;

				public String getP_name () {
					return this.p_name;
				}
				
			    public String startdate;

				public String getStartdate () {
					return this.startdate;
				}
				
			    public String enddate;

				public String getEnddate () {
					return this.enddate;
				}
				
			    public java.util.Date datime;

				public java.util.Date getDatime () {
					return this.datime;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String p_env;

				public String getP_env () {
					return this.p_env;
				}
				
			    public Integer row_count;

				public Integer getRow_count () {
					return this.row_count;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.startdate = readString(dis);
					
					this.enddate = readString(dis);
					
					this.datime = readDate(dis);
					
					this.status = readString(dis);
					
					this.p_env = readString(dis);
					
						this.row_count = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.startdate = readString(dis);
					
					this.enddate = readString(dis);
					
					this.datime = readDate(dis);
					
					this.status = readString(dis);
					
					this.p_env = readString(dis);
					
						this.row_count = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.startdate,dos);
					
					// String
				
						writeString(this.enddate,dos);
					
					// java.util.Date
				
						writeDate(this.datime,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
					// Integer
				
						writeInteger(this.row_count,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.startdate,dos);
					
					// String
				
						writeString(this.enddate,dos);
					
					// java.util.Date
				
						writeDate(this.datime,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
					// Integer
				
						writeInteger(this.row_count,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("p_name="+p_name);
		sb.append(",startdate="+startdate);
		sb.append(",enddate="+enddate);
		sb.append(",datime="+String.valueOf(datime));
		sb.append(",status="+status);
		sb.append(",p_env="+p_env);
		sb.append(",row_count="+String.valueOf(row_count));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(p_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_name);
            			}
            		
        			sb.append("|");
        		
        				if(startdate == null){
        					sb.append("<null>");
        				}else{
            				sb.append(startdate);
            			}
            		
        			sb.append("|");
        		
        				if(enddate == null){
        					sb.append("<null>");
        				}else{
            				sb.append(enddate);
            			}
            		
        			sb.append("|");
        		
        				if(datime == null){
        					sb.append("<null>");
        				}else{
            				sb.append(datime);
            			}
            		
        			sb.append("|");
        		
        				if(status == null){
        					sb.append("<null>");
        				}else{
            				sb.append(status);
            			}
            		
        			sb.append("|");
        		
        				if(p_env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_env);
            			}
            		
        			sb.append("|");
        		
        				if(row_count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(row_count);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tDBOutput_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_4 = new StringBuilder();
                    log4jParamters_tDBOutput_4.append("Parameters:");
                            log4jParamters_tDBOutput_4.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("HOST" + " = " + "context.log_host");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("PORT" + " = " + "\"5432\"");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DBNAME" + " = " + "context.log_database");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("SCHEMA_DB" + " = " + "context.log_schema");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("USER" + " = " + "context.log_user");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.log_pass)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("TABLE" + " = " + "\"batchjob_success_logs\"");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("COMMIT_EVERY" + " = " + "10000");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + (log4jParamters_tDBOutput_4) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_4().limitLog4jByte();
            }





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.log_schema;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("batchjob_success_logs");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("batchjob_success_logs");
}


int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.log_host+":"+"5432"+"/"+context.log_database + "?" + "noDatetimeStringSync=true";
    dbUser_tDBOutput_4 = context.log_user;

	final String decryptedPassword_tDBOutput_4 = context.log_pass; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection attempts to '")  + (url_tDBOutput_4)  + ("' with the username '")  + (dbUser_tDBOutput_4)  + ("'.") );
    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection to '")  + (url_tDBOutput_4)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_4.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4 + "\" (\"p_name\",\"startdate\",\"enddate\",\"datime\",\"status\",\"p_env\",\"row_count\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";

	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row20.p_name = context.rptname;
    	            	        	            	
    	            		row20.startdate = context.startdate;
    	            	        	            	
    	            		row20.enddate = context.enddate;
    	            	        	            	
    	            		row20.datime = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row20.status = "success";
    	            	        	            	
    	            		row20.p_env = context.env;
    	            	        	            	
    	            		row20.row_count = ((Integer)globalMap.get("tDBOutput_9_NB_LINE_INSERTED"));
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row20 - " + (row20==null? "": row20.toLogString()));
    			}
    		



        whetherReject_tDBOutput_4 = false;
                    if(row20.p_name == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, row20.p_name);
}

                    if(row20.startdate == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, row20.startdate);
}

                    if(row20.enddate == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, row20.enddate);
}

                    if(row20.datime != null) {
pstmt_tDBOutput_4.setTimestamp(4, new java.sql.Timestamp(row20.datime.getTime()));
} else {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(row20.status == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, row20.status);
}

                    if(row20.p_env == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, row20.p_env);
}

                    if(row20.row_count == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(7, row20.row_count);
}

			
    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Adding the record ")  + (nb_line_tDBOutput_4)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            log.error("tDBOutput_4 - "  + (errormessage_tDBOutput_4) );
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
					
			    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
			    	
            log.error("tDBOutput_4 - "  + (errormessage_tDBOutput_4) );
			    	System.err.println(errormessage_tDBOutput_4);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_4)  + (" record(s).") );
                    }
                    conn_tDBOutput_4.commit();
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_4 = 0;
                    }
                    commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
            log.error("tDBOutput_4 - "  + (errormessage_tDBOutput_4) );
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			if(rowsToCommitCount_tDBOutput_4 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_4)  + (" record(s).") );
			}
			conn_tDBOutput_4.commit();
			if(rowsToCommitCount_tDBOutput_4 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_4 = 0;
			}
			commitCounter_tDBOutput_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_4 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_4)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Done.") );

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_4.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
            log.error("tDBOutput_4 - "  + (errorMessage_tDBOutput_4) );
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				
			    public String p_name;

				public String getP_name () {
					return this.p_name;
				}
				
			    public String p_env;

				public String getP_env () {
					return this.p_env;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
		sb.append(",p_name="+p_name);
		sb.append(",p_env="+p_env);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        				if(p_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_name);
            			}
            		
        			sb.append("|");
        		
        				if(p_env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_env);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tStatCatcher_1Struct implements routines.system.IPersistableRow<after_tStatCatcher_1Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(after_tStatCatcher_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFixedFlowInput_2Process(globalMap);

		row5Struct row5 = new row5Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
                    log4jParamters_tDBOutput_1.append("Parameters:");
                            log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("HOST" + " = " + "context.log_host");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PORT" + " = " + "\"5432\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DBNAME" + " = " + "context.log_database");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SCHEMA_DB" + " = " + "context.log_schema");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USER" + " = " + "context.log_user");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.log_pass)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"ETL_Comp_Logs\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("COMMIT_EVERY" + " = " + "10000");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + (log4jParamters_tDBOutput_1) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_1().limitLog4jByte();
            }





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.log_schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("ETL_Comp_Logs");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("ETL_Comp_Logs");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.log_host+":"+"5432"+"/"+context.log_database + "?" + "noDatetimeStringSync=true";
    dbUser_tDBOutput_1 = context.log_user;

	final String decryptedPassword_tDBOutput_1 = context.log_pass; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection attempts to '")  + (url_tDBOutput_1)  + ("' with the username '")  + (dbUser_tDBOutput_1)  + ("'.") );
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to '")  + (url_tDBOutput_1)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_1.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\",\"p_name\",\"p_env\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row5_tMap_2 = 0;
		
		int count_row6_tMap_2 = 0;
		
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	
		tHash_Lookup_row6.initGet();
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_out1_tMap_2 = 0;
				
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tStatCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tStatCatcher_1 = new StringBuilder();
                    log4jParamters_tStatCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + (log4jParamters_tStatCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tStatCatcher_1().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
		row5.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row5.message = scm.getMessage();
		row5.duration = scm.getDuration();
		row5.moment = scm.getMoment();
		row5.message_type = scm.getMessageType();
		row5.job_version = scm.getJobVersion();
		row5.job_repository_id = scm.getJobId();
		row5.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row5 - " + (row5==null? "": row5.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							row6Struct row6 = null;
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
count_out1_tMap_2++;

out1_tmp.moment = row5.moment ;
out1_tmp.pid = row5.pid ;
out1_tmp.father_pid = row5.father_pid ;
out1_tmp.root_pid = row5.root_pid ;
out1_tmp.system_pid = row5.system_pid ;
out1_tmp.project = row5.project ;
out1_tmp.job = row5.job ;
out1_tmp.job_repository_id = row5.job_repository_id ;
out1_tmp.job_version = row5.job_version ;
out1_tmp.context = row5.context ;
out1_tmp.origin = row5.origin ;
out1_tmp.message_type = row5.message_type ;
out1_tmp.message = row5.message ;
out1_tmp.duration = row5.duration ;
out1_tmp.p_name = row6.p_name ;
out1_tmp.p_env = row6.p_env ;
out1 = out1_tmp;
log.debug("tMap_2 - Outputting the record " + count_out1_tMap_2 + " of the output table 'out1'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("out1 - " + (out1==null? "": out1.toLogString()));
    			}
    		



        whetherReject_tDBOutput_1 = false;
                    if(out1.moment != null) {
pstmt_tDBOutput_1.setTimestamp(1, new java.sql.Timestamp(out1.moment.getTime()));
} else {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(out1.pid == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, out1.pid);
}

                    if(out1.father_pid == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out1.father_pid);
}

                    if(out1.root_pid == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out1.root_pid);
}

                    if(out1.system_pid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(5, out1.system_pid);
}

                    if(out1.project == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out1.project);
}

                    if(out1.job == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, out1.job);
}

                    if(out1.job_repository_id == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, out1.job_repository_id);
}

                    if(out1.job_version == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, out1.job_version);
}

                    if(out1.context == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, out1.context);
}

                    if(out1.origin == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, out1.origin);
}

                    if(out1.message_type == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, out1.message_type);
}

                    if(out1.message == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, out1.message);
}

                    if(out1.duration == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(14, out1.duration);
}

                    if(out1.p_name == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, out1.p_name);
}

                    if(out1.p_env == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, out1.p_env);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Adding the record ")  + (nb_line_tDBOutput_1)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row6' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Done.") );

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'out1': " + count_out1_tMap_2 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_1 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_1)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Done.") );

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_1.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
            log.error("tDBOutput_1 - "  + (errorMessage_tDBOutput_1) );
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String p_name;

				public String getP_name () {
					return this.p_name;
				}
				
			    public String p_env;

				public String getP_env () {
					return this.p_env;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("p_name="+p_name);
		sb.append(",p_env="+p_env);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(p_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_name);
            			}
            		
        			sb.append("|");
        		
        				if(p_env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_env);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tFixedFlowInput_2 - inputs:(after_tStatCatcher_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_2 - inputs:(row5,row6) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";

	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row6.p_name = context.rptname;
    	            	        	            	
    	            		row6.p_env = context.env;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row6 - " + (row6==null? "": row6.toLogString()));
    			}
    		


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.p_name = row6.p_name;
				
				row6_HashRow.p_env = row6.p_env;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class error_dataStruct implements routines.system.IPersistableRow<error_dataStruct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				
			    public String p_name;

				public String getP_name () {
					return this.p_name;
				}
				
			    public String p_env;

				public String getP_env () {
					return this.p_env;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
		sb.append(",p_name="+p_name);
		sb.append(",p_env="+p_env);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        				if(p_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_name);
            			}
            		
        			sb.append("|");
        		
        				if(p_env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_env);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(error_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tLogCatcher_1Struct implements routines.system.IPersistableRow<after_tLogCatcher_1Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(after_tLogCatcher_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFixedFlowInput_3Process(globalMap);

		row11Struct row11 = new row11Struct();
error_dataStruct error_data = new error_dataStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"error_data");
					}
				
		int tos_count_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_2 = new StringBuilder();
                    log4jParamters_tDBOutput_2.append("Parameters:");
                            log4jParamters_tDBOutput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("HOST" + " = " + "context.log_host");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PORT" + " = " + "\"5432\"");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DBNAME" + " = " + "context.log_database");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SCHEMA_DB" + " = " + "context.log_schema");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USER" + " = " + "context.log_user");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.log_pass)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE" + " = " + "\"ETL_Error_Logs\"");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("COMMIT_EVERY" + " = " + "10000");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + (log4jParamters_tDBOutput_2) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_2().limitLog4jByte();
            }





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.log_schema;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("ETL_Error_Logs");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("ETL_Error_Logs");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.log_host+":"+"5432"+"/"+context.log_database + "?" + "noDatetimeStringSync=true";
    dbUser_tDBOutput_2 = context.log_user;

	final String decryptedPassword_tDBOutput_2 = context.log_pass; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection attempts to '")  + (url_tDBOutput_2)  + ("' with the username '")  + (dbUser_tDBOutput_2)  + ("'.") );
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to '")  + (url_tDBOutput_2)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_2.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"moment\",\"pid\",\"root_pid\",\"father_pid\",\"project\",\"job\",\"context\",\"priority\",\"type\",\"origin\",\"message\",\"code\",\"p_name\",\"p_env\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row11_tMap_3 = 0;
		
		int count_row15_tMap_3 = 0;
		
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	
		tHash_Lookup_row15.initGet();
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_error_data_tMap_3 = 0;
				
error_dataStruct error_data_tmp = new error_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_tLogCatcher_1.append("Parameters:");
                            log4jParamters_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + (log4jParamters_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tLogCatcher_1().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row11.type = lcm.getType();
		row11.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row11.priority = lcm.getPriority();
		row11.message = lcm.getMessage();
		row11.code = lcm.getCode();
		
		row11.moment = java.util.Calendar.getInstance().getTime();
	
    	row11.pid = pid;
		row11.root_pid = rootPid;
		row11.father_pid = fatherPid;
	
    	row11.project = projectName;
    	row11.job = jobName;
    	row11.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row11 - " + (row11==null? "": row11.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow15 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow15 = true;
			           		  	} // G 21
                    		  	
                    		

							row15Struct row15 = null;
                    		  	 
							

								while ((tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) || forceLooprow15) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row15'
									
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								
								if(!forceLooprow15) { // G 46
								
							
								 
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow15 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

error_data = null;


// # Output table : 'error_data'
count_error_data_tMap_3++;

error_data_tmp.moment = row11.moment ;
error_data_tmp.pid = row11.pid ;
error_data_tmp.root_pid = row11.root_pid ;
error_data_tmp.father_pid = row11.father_pid ;
error_data_tmp.project = row11.project ;
error_data_tmp.job = row11.job ;
error_data_tmp.context = row11.context ;
error_data_tmp.priority = row11.priority ;
error_data_tmp.type = row11.type ;
error_data_tmp.origin = row11.origin ;
error_data_tmp.message = row11.message ;
error_data_tmp.code = row11.code ;
error_data_tmp.p_name = row15.p_name ;
error_data_tmp.p_env = row15.p_env ;
error_data = error_data_tmp;
log.debug("tMap_3 - Outputting the record " + count_error_data_tMap_3 + " of the output table 'error_data'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "error_data"
if(error_data != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"error_data"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("error_data - " + (error_data==null? "": error_data.toLogString()));
    			}
    		



        whetherReject_tDBOutput_2 = false;
                    if(error_data.moment != null) {
pstmt_tDBOutput_2.setTimestamp(1, new java.sql.Timestamp(error_data.moment.getTime()));
} else {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(error_data.pid == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, error_data.pid);
}

                    if(error_data.root_pid == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, error_data.root_pid);
}

                    if(error_data.father_pid == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, error_data.father_pid);
}

                    if(error_data.project == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, error_data.project);
}

                    if(error_data.job == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, error_data.job);
}

                    if(error_data.context == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, error_data.context);
}

                    if(error_data.priority == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(8, error_data.priority);
}

                    if(error_data.type == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, error_data.type);
}

                    if(error_data.origin == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, error_data.origin);
}

                    if(error_data.message == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, error_data.message);
}

                    if(error_data.code == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(12, error_data.code);
}

                    if(error_data.p_name == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(13, error_data.p_name);
}

                    if(error_data.p_env == null) {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(14, error_data.p_env);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Adding the record ")  + (nb_line_tDBOutput_2)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "error_data"



	
		} // close loop of lookup 'row15' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'error_data': " + count_error_data_tMap_3 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_2 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_2)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"error_data");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Done.") );

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_2.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
            log.error("tDBOutput_2 - "  + (errorMessage_tDBOutput_2) );
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String p_name;

				public String getP_name () {
					return this.p_name;
				}
				
			    public String p_env;

				public String getP_env () {
					return this.p_env;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("p_name="+p_name);
		sb.append(",p_env="+p_env);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(p_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_name);
            			}
            		
        			sb.append("|");
        		
        				if(p_env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_env);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tFixedFlowInput_3 - inputs:(after_tLogCatcher_1) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_3 - inputs:(row11,row15) outputs:(error_data)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";

	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row15.p_name = context.rptname;
    	            	        	            	
    	            		row15.p_env = context.env;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row15 - " + (row15==null? "": row15.toLogString()));
    			}
    		


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.p_name = row15.p_name;
				
				row15_HashRow.p_env = row15.p_env;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class select_strStruct implements routines.system.IPersistableRow<select_strStruct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String qry_name;

				public String getQry_name () {
					return this.qry_name;
				}
				
			    public String select_string;

				public String getSelect_string () {
					return this.select_string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",qry_name="+qry_name);
		sb.append(",select_string="+select_string);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(id);
            			}
            		
        			sb.append("|");
        		
        				if(qry_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(qry_name);
            			}
            		
        			sb.append("|");
        		
        				if(select_string == null){
        					sb.append("<null>");
        				}else{
            				sb.append(select_string);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(select_strStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class logs_selectStruct implements routines.system.IPersistableRow<logs_selectStruct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String qry_name;

				public String getQry_name () {
					return this.qry_name;
				}
				
			    public String select_string;

				public String getSelect_string () {
					return this.select_string;
				}
				
			    public String env;

				public String getEnv () {
					return this.env;
				}
				
			    public String get_select_date;

				public String getGet_select_date () {
					return this.get_select_date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
					this.env = readString(dis);
					
					this.get_select_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
					this.env = readString(dis);
					
					this.get_select_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
					// String
				
						writeString(this.env,dos);
					
					// String
				
						writeString(this.get_select_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
					// String
				
						writeString(this.env,dos);
					
					// String
				
						writeString(this.get_select_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",qry_name="+qry_name);
		sb.append(",select_string="+select_string);
		sb.append(",env="+env);
		sb.append(",get_select_date="+get_select_date);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(id);
            			}
            		
        			sb.append("|");
        		
        				if(qry_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(qry_name);
            			}
            		
        			sb.append("|");
        		
        				if(select_string == null){
        					sb.append("<null>");
        				}else{
            				sb.append(select_string);
            			}
            		
        			sb.append("|");
        		
        				if(env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(env);
            			}
            		
        			sb.append("|");
        		
        				if(get_select_date == null){
        					sb.append("<null>");
        				}else{
            				sb.append(get_select_date);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(logs_selectStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String qry_name;

				public String getQry_name () {
					return this.qry_name;
				}
				
			    public String select_string;

				public String getSelect_string () {
					return this.select_string;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date update_date;

				public java.util.Date getUpdate_date () {
					return this.update_date;
				}
				
			    public int status;

				public int getStatus () {
					return this.status;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String type_engine;

				public String getType_engine () {
					return this.type_engine;
				}
				
			    public String type_source;

				public String getType_source () {
					return this.type_source;
				}
				
			    public String env;

				public String getEnv () {
					return this.env;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
					this.created_date = readDate(dis);
					
					this.update_date = readDate(dis);
					
			        this.status = dis.readInt();
					
					this.description = readString(dis);
					
					this.type_engine = readString(dis);
					
					this.type_source = readString(dis);
					
					this.env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.qry_name = readString(dis);
					
					this.select_string = readString(dis);
					
					this.created_date = readDate(dis);
					
					this.update_date = readDate(dis);
					
			        this.status = dis.readInt();
					
					this.description = readString(dis);
					
					this.type_engine = readString(dis);
					
					this.type_source = readString(dis);
					
					this.env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.update_date,dos);
					
					// int
				
		            	dos.writeInt(this.status);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.type_engine,dos);
					
					// String
				
						writeString(this.type_source,dos);
					
					// String
				
						writeString(this.env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.qry_name,dos);
					
					// String
				
						writeString(this.select_string,dos);
					
					// java.util.Date
				
						writeDate(this.created_date,dos);
					
					// java.util.Date
				
						writeDate(this.update_date,dos);
					
					// int
				
		            	dos.writeInt(this.status);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.type_engine,dos);
					
					// String
				
						writeString(this.type_source,dos);
					
					// String
				
						writeString(this.env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",qry_name="+qry_name);
		sb.append(",select_string="+select_string);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",update_date="+String.valueOf(update_date));
		sb.append(",status="+String.valueOf(status));
		sb.append(",description="+description);
		sb.append(",type_engine="+type_engine);
		sb.append(",type_source="+type_source);
		sb.append(",env="+env);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(id);
            			}
            		
        			sb.append("|");
        		
        				if(qry_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(qry_name);
            			}
            		
        			sb.append("|");
        		
        				if(select_string == null){
        					sb.append("<null>");
        				}else{
            				sb.append(select_string);
            			}
            		
        			sb.append("|");
        		
        				if(created_date == null){
        					sb.append("<null>");
        				}else{
            				sb.append(created_date);
            			}
            		
        			sb.append("|");
        		
        				if(update_date == null){
        					sb.append("<null>");
        				}else{
            				sb.append(update_date);
            			}
            		
        			sb.append("|");
        		
        				sb.append(status);
        			
        			sb.append("|");
        		
        				if(description == null){
        					sb.append("<null>");
        				}else{
            				sb.append(description);
            			}
            		
        			sb.append("|");
        		
        				if(type_engine == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type_engine);
            			}
            		
        			sb.append("|");
        		
        				if(type_source == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type_source);
            			}
            		
        			sb.append("|");
        		
        				if(env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(env);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
select_strStruct select_str = new select_strStruct();
logs_selectStruct logs_select = new logs_selectStruct();





	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tFlowToIterate_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tFlowToIterate_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"select_str");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowToIterate_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowToIterate_2 = new StringBuilder();
                    log4jParamters_tFlowToIterate_2.append("Parameters:");
                            log4jParamters_tFlowToIterate_2.append("DEFAULT_MAP" + " = " + "true");
                        log4jParamters_tFlowToIterate_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_2 - "  + (log4jParamters_tFlowToIterate_2) );
                    } 
                } 
            new BytesLimit65535_tFlowToIterate_2().limitLog4jByte();
            }

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */




	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"logs_select");
					}
				
		int tos_count_tLogRow_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_3 = new StringBuilder();
                    log4jParamters_tLogRow_3.append("Parameters:");
                            log4jParamters_tLogRow_3.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + (log4jParamters_tLogRow_3) );
                    } 
                } 
            new BytesLimit65535_tLogRow_3().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_4 = new StringBuilder();
                    log4jParamters_tMap_4.append("Parameters:");
                            log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + (log4jParamters_tMap_4) );
                    } 
                } 
            new BytesLimit65535_tMap_4().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row16_tMap_4 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_select_str_tMap_4 = 0;
				
select_strStruct select_str_tmp = new select_strStruct();
				int count_logs_select_tMap_4 = 0;
				
logs_selectStruct logs_select_tmp = new logs_selectStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.meta_host");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PORT" + " = " + "\"5432\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.meta_database");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("SCHEMA_DB" + " = " + "context.meta_schemal");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.meta_user");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.meta_pass)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"  select * from metadata.\"+context.meta_table+\" where status = 1   and id = '\"+context.meta_id+\"'  and  qry_name = '\"+context.meta_qryname+\"'   \"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USE_CURSOR" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_COLUMN" + " = " + "[{TRIM="+("false")+", SCHEMA_COLUMN="+("id")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("qry_name")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("select_string")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("created_date")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("update_date")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("status")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("description")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("type_engine")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("type_source")+"}, {TRIM="+("false")+", SCHEMA_COLUMN="+("env")+"}]");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlInput");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.meta_user;
				
				
	final String decryptedPassword_tDBInput_1 = context.meta_pass; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + context.meta_host + ":" + "5432" + "/" + context.meta_database;
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
	    		log.debug("tDBInput_1 - Connection is set auto commit to 'false'.");
			
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nselect * from metadata."+context.meta_table+" where status = 1 \nand id = '"+context.meta_id+"'  and  qry_name = '"+context.meta_qryname+"' \n";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row16.id = null;
							} else {
	                         		
        	row16.id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row16.qry_name = null;
							} else {
	                         		
        	row16.qry_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row16.select_string = null;
							} else {
	                         		
        	row16.select_string = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row16.created_date = null;
							} else {
										
			row16.created_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 4);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row16.update_date = null;
							} else {
										
			row16.update_date = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 5);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row16.status = 0;
							} else {
		                          
            row16.status = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row16.description = null;
							} else {
	                         		
        	row16.description = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row16.type_engine = null;
							} else {
	                         		
        	row16.type_engine = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row16.type_source = null;
							} else {
	                         		
        	row16.type_source = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row16.env = null;
							} else {
	                         		
        	row16.env = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row16 - " + (row16==null? "": row16.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

select_str = null;
logs_select = null;


// # Output table : 'select_str'
count_select_str_tMap_4++;

select_str_tmp.id = row16.id ;
select_str_tmp.qry_name = row16.qry_name ;
select_str_tmp.select_string = row16.select_string;
select_str = select_str_tmp;
log.debug("tMap_4 - Outputting the record " + count_select_str_tMap_4 + " of the output table 'select_str'.");


// # Output table : 'logs_select'
count_logs_select_tMap_4++;

logs_select_tmp.id = row16.id ;
logs_select_tmp.qry_name = row16.qry_name ;
logs_select_tmp.select_string = row16.select_string ;
logs_select_tmp.env = row16.env ;
logs_select_tmp.get_select_date = TalendDate.getDate("YYYY-MM-DD hh:mm:ss") ;
logs_select = logs_select_tmp;
log.debug("tMap_4 - Outputting the record " + count_logs_select_tMap_4 + " of the output table 'logs_select'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "select_str"
if(select_str != null) { 



	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"select_str"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("select_str - " + (select_str==null? "": select_str.toLogString()));
    			}
    		


    	
                if(log.isTraceEnabled())
            log.trace("tFlowToIterate_2 - "  + ("Set global var, key=select_str.id, value=")  + (select_str.id)  + (".") );            
            globalMap.put("select_str.id", select_str.id);
    	
                if(log.isTraceEnabled())
            log.trace("tFlowToIterate_2 - "  + ("Set global var, key=select_str.qry_name, value=")  + (select_str.qry_name)  + (".") );            
            globalMap.put("select_str.qry_name", select_str.qry_name);
    	
                if(log.isTraceEnabled())
            log.trace("tFlowToIterate_2 - "  + ("Set global var, key=select_str.select_string, value=")  + (select_str.select_string)  + (".") );            
            globalMap.put("select_str.select_string", select_str.select_string);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_2 - "  + ("Current iteration is: ")  + (counter_tFlowToIterate_2)  + (".") );
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */

} // End of branch "select_str"




// Start of branch "logs_select"
if(logs_select != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"logs_select"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("logs_select - " + (logs_select==null? "": logs_select.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(logs_select.id != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(logs_select.id)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(logs_select.qry_name != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(logs_select.qry_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(logs_select.select_string != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(logs_select.select_string)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(logs_select.env != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(logs_select.env)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(logs_select.get_select_date != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(logs_select.get_select_date)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    	log.info("tLogRow_3 - Content of row "+(nb_line_tLogRow_3+1)+": " + strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "logs_select"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
	    		log.debug("tDBInput_1 - Connection starting to commit.");
			
			conn_tDBInput_1.commit();
			
	    		log.debug("tDBInput_1 - Connection commit has succeeded.");
			
		
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			
 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'select_str': " + count_select_str_tMap_4 + ".");
				log.debug("tMap_4 - Written records count in the table 'logs_select': " + count_logs_select_tMap_4 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Done.") );

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"select_str");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tFlowToIterate_2 - "  + ("Done.") );

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tFlowToIterate_2", end_Hash.get("tFlowToIterate_2")-start_Hash.get("tFlowToIterate_2"));
tStatCatcher_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tFlowToIterate_2 end ] stop
 */




	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);
                if(log.isInfoEnabled())
            log.info("tLogRow_3 - "  + ("Printed row count: ")  + (nb_line_tLogRow_3)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"logs_select");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Done.") );

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";

	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */




	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


try {
    context.meta_id = globalMap.get("select_str.id") != null
        ? String.valueOf(globalMap.get("select_str.id"))
        : null;

    context.meta_qryname = globalMap.get("select_str.qry_name") != null
        ? globalMap.get("select_str.qry_name").toString()
        : "";

    context.select_var = globalMap.get("select_str.select_string") != null
        ? globalMap.get("select_str.select_string").toString()
        : "";

} catch (Exception e) {
    System.err.println("Error while setting context variables: " + e.getMessage());
}

 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tREST_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];
    static byte[] commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[0];

	
			    public String p_name;

				public String getP_name () {
					return this.p_name;
				}
				
			    public java.util.Date datime;

				public java.util.Date getDatime () {
					return this.datime;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public String p_env;

				public String getP_env () {
					return this.p_env;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length) {
				if(length < 1024 && commonByteArray_DSC_ETL_DRE_FULLLOAD_STD.length == 0) {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[1024];
				} else {
   					commonByteArray_DSC_ETL_DRE_FULLLOAD_STD = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length);
			strReturn = new String(commonByteArray_DSC_ETL_DRE_FULLLOAD_STD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.datime = readDate(dis);
					
					this.status = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DSC_ETL_DRE_FULLLOAD_STD) {

        	try {

        		int length = 0;
		
					this.p_name = readString(dis);
					
					this.datime = readDate(dis);
					
					this.status = readString(dis);
					
					this.p_env = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// java.util.Date
				
						writeDate(this.datime,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.p_name,dos);
					
					// java.util.Date
				
						writeDate(this.datime,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.p_env,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("p_name="+p_name);
		sb.append(",datime="+String.valueOf(datime));
		sb.append(",status="+status);
		sb.append(",p_env="+p_env);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(p_name == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_name);
            			}
            		
        			sb.append("|");
        		
        				if(datime == null){
        					sb.append("<null>");
        				}else{
            				sb.append(datime);
            			}
            		
        			sb.append("|");
        		
        				if(status == null){
        					sb.append("<null>");
        				}else{
            				sb.append(status);
            			}
            		
        			sb.append("|");
        		
        				if(p_env == null){
        					sb.append("<null>");
        				}else{
            				sb.append(p_env);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();




	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tDBOutput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_3 = new StringBuilder();
                    log4jParamters_tDBOutput_3.append("Parameters:");
                            log4jParamters_tDBOutput_3.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("HOST" + " = " + "context.log_host");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("PORT" + " = " + "\"5432\"");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DBNAME" + " = " + "context.log_database");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("SCHEMA_DB" + " = " + "context.log_schema");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("USER" + " = " + "context.log_user");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.log_pass)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("TABLE" + " = " + "\"batchjob_error_logs\"");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DATA_ACTION" + " = " + "UPDATE");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("PROPERTIES" + " = " + "\"noDatetimeStringSync=true\"");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("COMMIT_EVERY" + " = " + "10000");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("BATCH_SIZE" + " = " + "10000");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + (log4jParamters_tDBOutput_3) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_3().limitLog4jByte();
            }





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.log_schema;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("batchjob_error_logs");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("batchjob_error_logs");
}

        int updateKeyCount_tDBOutput_3 = 0;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.log_host+":"+"5432"+"/"+context.log_database + "?" + "noDatetimeStringSync=true";
    dbUser_tDBOutput_3 = context.log_user;

	final String decryptedPassword_tDBOutput_3 = context.log_pass; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection attempts to '")  + (url_tDBOutput_3)  + ("' with the username '")  + (dbUser_tDBOutput_3)  + ("'.") );
    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection to '")  + (url_tDBOutput_3)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_3.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_3 = 10000;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"p_name\" = ?,\"datime\" = ?,\"status\" = ?,\"p_env\" = ? WHERE ";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";

	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row3_0.p_name = context.rptname;
    	            	        	            	
    	            		row3_0.datime = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row3_0.status = "Error";
    	            	        	            	
    	            		row3_0.p_env = context.env;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3_0 - " + (row3_0==null? "": row3_0.toLogString()));
    			}
    		



        whetherReject_tDBOutput_3 = false;
                    if(row3_0.p_name == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, row3_0.p_name);
}

                    if(row3_0.datime != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(row3_0.datime.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(row3_0.status == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, row3_0.status);
}

                    if(row3_0.p_env == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, row3_0.p_env);
}

    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Adding the record ")  + (nb_line_tDBOutput_3)  + (" to the ")  + ("UPDATE")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            log.error("tDBOutput_3 - "  + (errormessage_tDBOutput_3) );
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
            	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
					
			    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
			    	
            log.error("tDBOutput_3 - "  + (errormessage_tDBOutput_3) );
			    	System.err.println(errormessage_tDBOutput_3);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_3)  + (" record(s).") );
                    }
                    conn_tDBOutput_3.commit();
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_3 = 0;
                    }
                    commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
            log.error("tDBOutput_3 - "  + (errormessage_tDBOutput_3) );
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			if(rowsToCommitCount_tDBOutput_3 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_3)  + (" record(s).") );
			}
			conn_tDBOutput_3.commit();
			if(rowsToCommitCount_tDBOutput_3 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_3 = 0;
			}
			commitCounter_tDBOutput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_3 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_3)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Done.") );

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_3.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
            log.error("tDBOutput_3 - "  + (errorMessage_tDBOutput_3) );
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DRE_FULLLOAD_STD DRE_FULLLOAD_STDClass = new DRE_FULLLOAD_STD();

        int exitCode = DRE_FULLLOAD_STDClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'DRE_FULLLOAD_STD' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'DRE_FULLLOAD_STD' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DRE_FULLLOAD_STD.class.getClassLoader().getResourceAsStream("dsc_etl/dre_fullload_std_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DRE_FULLLOAD_STD.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("host_url", "id_String");
                        if(context.getStringValue("host_url") == null) {
                            context.host_url = null;
                        } else {
                            context.host_url=(String) context.getProperty("host_url");
                        }
                        context.setContextType("username", "id_String");
                        if(context.getStringValue("username") == null) {
                            context.username = null;
                        } else {
                            context.username=(String) context.getProperty("username");
                        }
                        context.setContextType("password", "id_String");
                        if(context.getStringValue("password") == null) {
                            context.password = null;
                        } else {
                            context.password=(String) context.getProperty("password");
                        }
                        context.setContextType("select_var", "id_String");
                        if(context.getStringValue("select_var") == null) {
                            context.select_var = null;
                        } else {
                            context.select_var=(String) context.getProperty("select_var");
                        }
                        context.setContextType("continueLooping", "id_Boolean");
                        if(context.getStringValue("continueLooping") == null) {
                            context.continueLooping = null;
                        } else {
                            try{
                                context.continueLooping=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("continueLooping"));
                            } catch(NumberFormatException e){
                                log.warn(String.format("Null value will be used for context parameter %s: %s", "continueLooping", e.getMessage()));
                                context.continueLooping=null;
                            }
                        }
                        context.setContextType("enddate", "id_String");
                        if(context.getStringValue("enddate") == null) {
                            context.enddate = null;
                        } else {
                            context.enddate=(String) context.getProperty("enddate");
                        }
                        context.setContextType("env", "id_String");
                        if(context.getStringValue("env") == null) {
                            context.env = null;
                        } else {
                            context.env=(String) context.getProperty("env");
                        }
                        context.setContextType("log_database", "id_String");
                        if(context.getStringValue("log_database") == null) {
                            context.log_database = null;
                        } else {
                            context.log_database=(String) context.getProperty("log_database");
                        }
                        context.setContextType("log_host", "id_String");
                        if(context.getStringValue("log_host") == null) {
                            context.log_host = null;
                        } else {
                            context.log_host=(String) context.getProperty("log_host");
                        }
                        context.setContextType("log_pass", "id_String");
                        if(context.getStringValue("log_pass") == null) {
                            context.log_pass = null;
                        } else {
                            context.log_pass=(String) context.getProperty("log_pass");
                        }
                        context.setContextType("log_port", "id_String");
                        if(context.getStringValue("log_port") == null) {
                            context.log_port = null;
                        } else {
                            context.log_port=(String) context.getProperty("log_port");
                        }
                        context.setContextType("log_schema", "id_String");
                        if(context.getStringValue("log_schema") == null) {
                            context.log_schema = null;
                        } else {
                            context.log_schema=(String) context.getProperty("log_schema");
                        }
                        context.setContextType("log_table", "id_String");
                        if(context.getStringValue("log_table") == null) {
                            context.log_table = null;
                        } else {
                            context.log_table=(String) context.getProperty("log_table");
                        }
                        context.setContextType("log_user", "id_String");
                        if(context.getStringValue("log_user") == null) {
                            context.log_user = null;
                        } else {
                            context.log_user=(String) context.getProperty("log_user");
                        }
                        context.setContextType("postgre_database", "id_String");
                        if(context.getStringValue("postgre_database") == null) {
                            context.postgre_database = null;
                        } else {
                            context.postgre_database=(String) context.getProperty("postgre_database");
                        }
                        context.setContextType("postgre_host", "id_String");
                        if(context.getStringValue("postgre_host") == null) {
                            context.postgre_host = null;
                        } else {
                            context.postgre_host=(String) context.getProperty("postgre_host");
                        }
                        context.setContextType("postgre_password", "id_String");
                        if(context.getStringValue("postgre_password") == null) {
                            context.postgre_password = null;
                        } else {
                            context.postgre_password=(String) context.getProperty("postgre_password");
                        }
                        context.setContextType("postgre_port", "id_String");
                        if(context.getStringValue("postgre_port") == null) {
                            context.postgre_port = null;
                        } else {
                            context.postgre_port=(String) context.getProperty("postgre_port");
                        }
                        context.setContextType("postgre_schema", "id_String");
                        if(context.getStringValue("postgre_schema") == null) {
                            context.postgre_schema = null;
                        } else {
                            context.postgre_schema=(String) context.getProperty("postgre_schema");
                        }
                        context.setContextType("postgre_username", "id_String");
                        if(context.getStringValue("postgre_username") == null) {
                            context.postgre_username = null;
                        } else {
                            context.postgre_username=(String) context.getProperty("postgre_username");
                        }
                        context.setContextType("rptname", "id_String");
                        if(context.getStringValue("rptname") == null) {
                            context.rptname = null;
                        } else {
                            context.rptname=(String) context.getProperty("rptname");
                        }
                        context.setContextType("startdate", "id_String");
                        if(context.getStringValue("startdate") == null) {
                            context.startdate = null;
                        } else {
                            context.startdate=(String) context.getProperty("startdate");
                        }
                        context.setContextType("meta_host", "id_String");
                        if(context.getStringValue("meta_host") == null) {
                            context.meta_host = null;
                        } else {
                            context.meta_host=(String) context.getProperty("meta_host");
                        }
                        context.setContextType("meta_database", "id_String");
                        if(context.getStringValue("meta_database") == null) {
                            context.meta_database = null;
                        } else {
                            context.meta_database=(String) context.getProperty("meta_database");
                        }
                        context.setContextType("meta_schemal", "id_String");
                        if(context.getStringValue("meta_schemal") == null) {
                            context.meta_schemal = null;
                        } else {
                            context.meta_schemal=(String) context.getProperty("meta_schemal");
                        }
                        context.setContextType("meta_user", "id_String");
                        if(context.getStringValue("meta_user") == null) {
                            context.meta_user = null;
                        } else {
                            context.meta_user=(String) context.getProperty("meta_user");
                        }
                        context.setContextType("meta_pass", "id_String");
                        if(context.getStringValue("meta_pass") == null) {
                            context.meta_pass = null;
                        } else {
                            context.meta_pass=(String) context.getProperty("meta_pass");
                        }
                        context.setContextType("meta_table", "id_String");
                        if(context.getStringValue("meta_table") == null) {
                            context.meta_table = null;
                        } else {
                            context.meta_table=(String) context.getProperty("meta_table");
                        }
                        context.setContextType("meta_id", "id_String");
                        if(context.getStringValue("meta_id") == null) {
                            context.meta_id = null;
                        } else {
                            context.meta_id=(String) context.getProperty("meta_id");
                        }
                        context.setContextType("meta_qryname", "id_String");
                        if(context.getStringValue("meta_qryname") == null) {
                            context.meta_qryname = null;
                        } else {
                            context.meta_qryname=(String) context.getProperty("meta_qryname");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("host_url")) {
                context.host_url = (String) parentContextMap.get("host_url");
            }if (parentContextMap.containsKey("username")) {
                context.username = (String) parentContextMap.get("username");
            }if (parentContextMap.containsKey("password")) {
                context.password = (String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("select_var")) {
                context.select_var = (String) parentContextMap.get("select_var");
            }if (parentContextMap.containsKey("continueLooping")) {
                context.continueLooping = (Boolean) parentContextMap.get("continueLooping");
            }if (parentContextMap.containsKey("enddate")) {
                context.enddate = (String) parentContextMap.get("enddate");
            }if (parentContextMap.containsKey("env")) {
                context.env = (String) parentContextMap.get("env");
            }if (parentContextMap.containsKey("log_database")) {
                context.log_database = (String) parentContextMap.get("log_database");
            }if (parentContextMap.containsKey("log_host")) {
                context.log_host = (String) parentContextMap.get("log_host");
            }if (parentContextMap.containsKey("log_pass")) {
                context.log_pass = (String) parentContextMap.get("log_pass");
            }if (parentContextMap.containsKey("log_port")) {
                context.log_port = (String) parentContextMap.get("log_port");
            }if (parentContextMap.containsKey("log_schema")) {
                context.log_schema = (String) parentContextMap.get("log_schema");
            }if (parentContextMap.containsKey("log_table")) {
                context.log_table = (String) parentContextMap.get("log_table");
            }if (parentContextMap.containsKey("log_user")) {
                context.log_user = (String) parentContextMap.get("log_user");
            }if (parentContextMap.containsKey("postgre_database")) {
                context.postgre_database = (String) parentContextMap.get("postgre_database");
            }if (parentContextMap.containsKey("postgre_host")) {
                context.postgre_host = (String) parentContextMap.get("postgre_host");
            }if (parentContextMap.containsKey("postgre_password")) {
                context.postgre_password = (String) parentContextMap.get("postgre_password");
            }if (parentContextMap.containsKey("postgre_port")) {
                context.postgre_port = (String) parentContextMap.get("postgre_port");
            }if (parentContextMap.containsKey("postgre_schema")) {
                context.postgre_schema = (String) parentContextMap.get("postgre_schema");
            }if (parentContextMap.containsKey("postgre_username")) {
                context.postgre_username = (String) parentContextMap.get("postgre_username");
            }if (parentContextMap.containsKey("rptname")) {
                context.rptname = (String) parentContextMap.get("rptname");
            }if (parentContextMap.containsKey("startdate")) {
                context.startdate = (String) parentContextMap.get("startdate");
            }if (parentContextMap.containsKey("meta_host")) {
                context.meta_host = (String) parentContextMap.get("meta_host");
            }if (parentContextMap.containsKey("meta_database")) {
                context.meta_database = (String) parentContextMap.get("meta_database");
            }if (parentContextMap.containsKey("meta_schemal")) {
                context.meta_schemal = (String) parentContextMap.get("meta_schemal");
            }if (parentContextMap.containsKey("meta_user")) {
                context.meta_user = (String) parentContextMap.get("meta_user");
            }if (parentContextMap.containsKey("meta_pass")) {
                context.meta_pass = (String) parentContextMap.get("meta_pass");
            }if (parentContextMap.containsKey("meta_table")) {
                context.meta_table = (String) parentContextMap.get("meta_table");
            }if (parentContextMap.containsKey("meta_id")) {
                context.meta_id = (String) parentContextMap.get("meta_id");
            }if (parentContextMap.containsKey("meta_qryname")) {
                context.meta_qryname = (String) parentContextMap.get("meta_qryname");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DRE_FULLLOAD_STD");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     568231 characters generated by Talend Open Studio for Big Data 
 *     on the December 3, 2024 at 9:22:30 AM ICT
 ************************************************************************************************/